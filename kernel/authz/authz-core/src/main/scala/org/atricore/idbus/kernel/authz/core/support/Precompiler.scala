/*
 * Atricore IDBus
 *
 * Copyright (c) 2009-2012, Atricore Inc.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */

package org.atricore.idbus.kernel.authz.core.support

import java.io.File
import org.atricore.idbus.kernel.authz.core.AuthorizationEngine

/**
 * This class - heavily based on Scalate's precompiler - can precompile access control policies into JVM
 * classes.
 *
 * @author <a href="mailto:gbrigandi@atricore.org">Gianluca Brigandi</a>
 */
class Precompiler {

  var sources = Array[File]()
  var workingDirectory: File = _
  var targetDirectory: File = _
  var policies = Array[String]()
  var info: {def apply(v1: String): Unit} = (value: String) => println(value)
  var contextClass: String = _
  var bootClassName: String = _

  def execute() = {

    if (sources == null || sources.isEmpty) {
      throw new IllegalArgumentException("The sources property not properly set")
    }

    var engine = new AuthorizationEngine(sources) {
      // lets output generated bytecode to the classes directory.
      override def bytecodeDirectory = {
        if (targetDirectory != null) {
          targetDirectory
        } else {
          super.bytecodeDirectory
        }
      }
    }

    engine.classLoader = Thread.currentThread.getContextClassLoader

    if (workingDirectory != null) {
      engine.workingDirectory = workingDirectory
      workingDirectory.mkdirs();
    }
    if (bootClassName != null) {
      engine.bootClassName = bootClassName
    }
    engine.boot

    var paths = List[String]()

    for (extension <- engine.codeGenerators.keysIterator; sd <- sources if sd.exists) {
      paths = collectUrisWithExtension(sd, "", "." + extension) ::: paths;
    }

    policies.foreach {
      x =>
        paths ::= x
    }

    info("Precompiling XACML rules into Scala classes...");
    for (uri <- paths) {

      val file = sources.map(new File(_, uri)).find(_.exists).getOrElse(uri)
      info("    processing " + file)
      val policy = engine.load(uri)
    }
  }

  protected def collectUrisWithExtension(basedir: File, baseuri: String, extension: String): List[String] = {
    var collected = List[String]()
    if (basedir.isDirectory()) {
      var files = basedir.listFiles();
      if (files != null) {
        for (file <- files) {
          if (file.isDirectory()) {
            collected = collectUrisWithExtension(file, baseuri + "/" + file.getName(), extension) ::: collected;
          } else {
            if (file.getName().endsWith(extension)) {
              collected = baseuri + "/" + file.getName() :: collected;
            } else {
            }

          }
        }
      }
    }
    collected
  }

}