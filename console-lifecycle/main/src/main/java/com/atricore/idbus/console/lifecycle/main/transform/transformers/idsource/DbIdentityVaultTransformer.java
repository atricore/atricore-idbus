package com.atricore.idbus.console.lifecycle.main.transform.transformers.idsource;

import com.atricore.idbus.console.lifecycle.main.domain.IdentityAppliance;
import com.atricore.idbus.console.lifecycle.main.domain.metadata.DbIdentityVault;
import com.atricore.idbus.console.lifecycle.main.exception.TransformException;
import com.atricore.idbus.console.lifecycle.main.transform.IdProjectModule;
import com.atricore.idbus.console.lifecycle.main.transform.IdProjectResource;
import com.atricore.idbus.console.lifecycle.main.transform.TransformEvent;
import com.atricore.idbus.console.lifecycle.main.transform.transformers.AbstractTransformer;
import com.atricore.idbus.console.lifecycle.support.springmetadata.model.*;
import com.atricore.idbus.console.lifecycle.support.springmetadata.model.osgi.Service;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.atricore.idbus.bundles.datanucleus.core.OsgiJDOPersistenceManagerFactoryBean;
import org.atricore.idbus.connectors.jdoidentityvault.JDOIdentityPartition;
import org.atricore.idbus.connectors.jdoidentityvault.JDOIdentityStore;
import org.atricore.idbus.connectors.jdoidentityvault.JDOIdentityVault;
import org.atricore.idbus.connectors.jdoidentityvault.JDOSchemaManager;
import org.atricore.idbus.kernel.common.support.jdbc.DriverManagerDataSource;
import org.atricore.idbus.kernel.main.mediation.channel.PspChannelImpl;
import org.atricore.idbus.kernel.main.mediation.endpoint.IdentityMediationEndpointImpl;
import org.atricore.idbus.kernel.main.mediation.osgi.OsgiIdentityMediationUnit;
import org.atricore.idbus.kernel.main.mediation.provider.ProvisioningServiceProviderImpl;
import org.atricore.idbus.kernel.main.provisioning.impl.ProvisioningTargetImpl;

import org.atricore.idbus.connectors.jdoidentityvault.domain.dao.impl.*;

import java.util.*;

import static com.atricore.idbus.console.lifecycle.support.springmetadata.util.BeanUtils.*;

/**
 * @author <a href=mailto:sgonzalez@atricore.org>Sebastian Gonzalez Oyuela</a>
 */
public class DbIdentityVaultTransformer extends AbstractTransformer {

    private static final Log logger = LogFactory.getLog(DbIdentityVaultTransformer.class);

    @Override
    public boolean accept(TransformEvent event) {
        if (event.getData() instanceof DbIdentityVault) {
            DbIdentityVault idvault = (DbIdentityVault) event.getData();
            return true;
        }
        return false;
    }

    @Override
    public void before(TransformEvent event) throws TransformException {

        DbIdentityVault idVault = (DbIdentityVault) event.getData();

        Beans pspBeans = newBeans(idVault.getName() + " : PSP Configuration generated by Atricore Identity Bus Server on " + new Date().toGMTString());
        Beans baseBeans = (Beans) event.getContext().get("beans");
        Beans beansOsgi = (Beans) event.getContext().get("beansOsgi");

        String idauPath = (String) event.getContext().get("idauPath");

        // Publish root element so that other transformers can use it.
        event.getContext().put("pspBeans", pspBeans);

        if (logger.isDebugEnabled())
            logger.debug("Generating PSP " + idVault.getName() + " configuration model");

        IdentityAppliance appliance = event.getContext().getProject().getIdAppliance();

        // PSP Bean
        String pspName = normalizeBeanName(idVault.getName());
        Bean pspBean = newBean(pspBeans, pspName, ProvisioningServiceProviderImpl.class);
        setPropertyValue(pspBean, "name", pspBean.getName());
        setPropertyValue(pspBean, "description", idVault.getDescription() != null ? idVault.getDescription() : pspName + " DB Identity Vault");
        setPropertyValue(pspBean, "role", "PSP");

        // SPML 2.0 Identity Mediator for PSP
        Bean mediatorBean = newBean(pspBeans, pspName + "-spml2-mediator", "org.atricore.idbus.capabilities.spmlr2.main.psp.SpmlR2PSPMediator");
        Bean bindingFactoryBean = newAnonymousBean("org.atricore.idbus.capabilities.spmlr2.main.binding.SpmlR2BindingFactory");
        setPropertyBean(mediatorBean, "bindingFactory", bindingFactoryBean);

        // SPML 2.0 Client
        Bean pspClient = newBean(pspBeans, pspName + "-client", "org.atricore.idbus.capabilities.spmlr2.main.client.SpmlR2MediationClientImpl");
        setPropertyRef(pspClient, "psp", pspBean.getName());
        setPropertyValue(pspClient, "serviceType", "{urn:oasis:names:tc:SPML:2:0}PSPService");
        setPropertyValue(pspClient, "binding", "urn:oasis:names:tc:SPML:2:0:bindings:LOCAL");

        // PSP Channel Bean
        Bean pspChannelBean = newBean(pspBeans, pspName + "-default-channel", PspChannelImpl.class);
        setPropertyValue(pspChannelBean, "name", pspChannelBean.getName());
        setPropertyValue(pspChannelBean, "description", pspName + " default channel");
        setPropertyRef(pspChannelBean, "identityMediator", mediatorBean.getName());
        setPropertyRef(pspChannelBean, "unitContainer", appliance.getIdApplianceDefinition().getName() + "-container");

        String location = resolveLocationUrl(appliance.getIdApplianceDefinition().getLocation());
        location += pspName.toUpperCase() + "/SPML2";
        setPropertyValue(pspChannelBean, "location", location);

        // PSP local endpoints
        Bean localSpmlEp = newAnonymousBean(IdentityMediationEndpointImpl.class);
        setPropertyValue(localSpmlEp, "name", pspChannelBean.getName() + "-local");
        setPropertyValue(localSpmlEp, "type", "{urn:oasis:names:tc:SPML:2:0}PSPService");
        setPropertyValue(localSpmlEp, "binding", "urn:oasis:names:tc:SPML:2:0:bindings:LOCAL");
        setPropertyValue(localSpmlEp, "location", "local:" + resolveLocationPath(appliance.getIdApplianceDefinition().getLocation()) + pspName.toUpperCase() + "/SPML2/LOCAL");

        addPropertyBean(pspChannelBean, "endpoints", localSpmlEp);

        // DataSource
        String localDbName = (appliance.getIdApplianceDefinition().getName() + pspName).toLowerCase();
        String dsName = (appliance.getIdApplianceDefinition().getName() + pspName).toLowerCase();
        int localDbPort = 1527; // TODO : Take from persistence configuration!
        String localDbUrl = "jdbc:derby://localhost:" + localDbPort + "/" + localDbName + ";create=true";

        Bean dsBean = newBean(pspBeans, pspName + "-ds", DriverManagerDataSource.class);
        setConstructorArg(dsBean, 0, "java.lang.String", idVault.isExternalDB() ? idVault.getDriverName() : "org.apache.derby.jdbc.ClientDriver");
        setConstructorArg(dsBean, 1, "java.lang.String", idVault.isExternalDB() ? idVault.getConnectionUrl() : localDbUrl);
        setConstructorArg(dsBean, 2, "java.lang.String", idVault.getUsername());
        setConstructorArg(dsBean, 3, "java.lang.String", idVault.getPassword());
        setConstructorArgRef(dsBean, 4, "jdbc-manager");

        // DS Service exported, with service property jdbcDS set
        Service dsExporter = new Service();

        Value dsNameKeyValue = new Value();
        dsNameKeyValue.getContent().add("jdbcDS");
        Key dsNameKey = new Key();
        dsNameKey.getBeenAndRevesAndIdreves().add(dsNameKeyValue);

        Entry dsNameProp = new Entry();

        dsNameProp.setKey(dsNameKey);
        dsNameProp.setValue(dsName);
        MapType dsProps = new MapType();
        dsProps.getEntries().add(dsNameProp);

        dsExporter.setId(dsBean.getName() + "-exporter");
        dsExporter.setRef(dsBean.getName());
        dsExporter.setInterface("javax.sql.DataSource");
        dsExporter.setServiceProperties(dsProps);

        pspBeans.getImportsAndAliasAndBeen().add(dsExporter);

        // PMF

        Bean pspPmfTargetBean = newAnonymousBean(OsgiJDOPersistenceManagerFactoryBean.class);

        setPropertyRef(pspPmfTargetBean, "dataSource", dsBean.getName());

        addEntryToMap(pspPmfTargetBean, "jdoProperties", "javax.jdo.option.Mapping", "default");
        addEntryToMap(pspPmfTargetBean, "jdoProperties", "javax.jdo.PersistenceManagerFactoryClass", "org.datanucleus.jdo.JDOPersistenceManagerFactory");

        addEntryToMap(pspPmfTargetBean, "jdoProperties", "jdbc.dataSourceUrl", "osgi:javax.sql.DataSource/(&(jdbcDS=" + dsName + "))");
        addEntryToMap(pspPmfTargetBean, "jdoProperties", "jdbc.ConnectionURL", idVault.isExternalDB() ? idVault.getConnectionUrl() : localDbUrl);
        addEntryToMap(pspPmfTargetBean, "jdoProperties", "jdbc.ConnectionUserName", idVault.getUsername());
        addEntryToMap(pspPmfTargetBean, "jdoProperties", "jdbc.ConnectionPassword", idVault.getPassword());
        addEntryToMap(pspPmfTargetBean, "jdoProperties", "jdbc.ConnectionDriverName", "org.apache.derby.jdbc.ClientDriver");


        addEntryToMap(pspPmfTargetBean, "jdoProperties", "javax.jdo.option.ConnectionURL", idVault.isExternalDB() ? idVault.getConnectionUrl() : localDbUrl);
        addEntryToMap(pspPmfTargetBean, "jdoProperties", "javax.jdo.option.ConnectionUserName", idVault.getUsername());
        addEntryToMap(pspPmfTargetBean, "jdoProperties", "javax.jdo.option.ConnectionPassword", idVault.getPassword());
        addEntryToMap(pspPmfTargetBean, "jdoProperties", "javax.jdo.option.ConnectionDriverName", idVault.isExternalDB() ? idVault.getDriverName() : "org.apache.derby.jdbc.ClientDriver");

        addEntryToMap(pspPmfTargetBean, "jdoProperties", "datanucleus.storeManagerType", "rdbms");
        addEntryToMap(pspPmfTargetBean, "jdoProperties", "datanucleus.metadata.validate", "false");
        addEntryToMap(pspPmfTargetBean, "jdoProperties", "datanucleus.autoCreateSchema", "true");
        addEntryToMap(pspPmfTargetBean, "jdoProperties", "datanucleus.autoCreateColumns", "true");
        addEntryToMap(pspPmfTargetBean, "jdoProperties", "datanucleus.validateTables", "false");
        addEntryToMap(pspPmfTargetBean, "jdoProperties", "datanucleus.validateConstraints", "false");
        addEntryToMap(pspPmfTargetBean, "jdoProperties", "datanucleus.classLoaderResolverName", "jdo");
        addEntryToMap(pspPmfTargetBean, "jdoProperties", "datanucleus.plugin.pluginRegistryClassName", "org.atricore.idbus.bundles.datanucleus.core.OsgiPluginRegistry");
        addEntryToMap(pspPmfTargetBean, "jdoProperties", "datanucleus.metadata.autoregistration", "false");

        Bean pspPmfBean = newBean(pspBeans, pspName + "-pmf", "org.springframework.orm.jdo.TransactionAwarePersistenceManagerFactoryProxy");
        setPropertyBean(pspPmfBean, "targetPersistenceManagerFactory", pspPmfTargetBean);

        // Transaction Manager
        Bean txMgrBean = newBean(pspBeans, "transactionManager", "org.springframework.orm.jdo.JdoTransactionManager");
        setPropertyRef(txMgrBean, "persistenceManagerFactory", pspPmfBean.getName());

        // DAOs
        Bean secQuestionDaoBean = newBean(pspBeans, "sec-question-dao" , JDOSecurityQuestionDAOImpl.class);
        setPropertyRef(secQuestionDaoBean, "persistenceManagerFactory", pspPmfBean.getName());

        Bean groupDaoBean = newBean(pspBeans, "group-dao", JDOGroupDAOImpl.class);
        setPropertyRef(groupDaoBean, "persistenceManagerFactory", pspPmfBean.getName());

        Bean userDaoBean = newBean(pspBeans, "user-dao", JDOUserDAOImpl.class);
        setPropertyRef(userDaoBean, "persistenceManagerFactory", pspPmfBean.getName());

        Bean userSecQuestionDaoBean = newBean(pspBeans, "user-sec-question-dao" , JDOUserSecurityQuestionDAOImpl.class);
        setPropertyRef(userSecQuestionDaoBean, "persistenceManagerFactory", pspPmfBean.getName());

        Bean userAttrDaoBean = newBean(pspBeans, "user-attribute-dao" , JDOUserAttributeDefinitionDAOImpl.class);
        setPropertyRef(userAttrDaoBean, "persistenceManagerFactory", pspPmfBean.getName());

        Bean groupAttrDaoBean = newBean(pspBeans, "group-attribute-dao" , JDOGroupAttributeDefinitionDAOImpl.class);
        setPropertyRef(groupAttrDaoBean, "persistenceManagerFactory", pspPmfBean.getName());

        Bean userAttrValueDaoBean = newBean(pspBeans, "user-attribute-value-dao" , JDOUserAttributeValueDAOImpl.class);
        setPropertyRef(userAttrValueDaoBean, "persistenceManagerFactory", pspPmfBean.getName());

        Bean groupAttrValueDaoBean = newBean(pspBeans, "group-attribute-value-dao" , JDOGroupAttributeValueDAOImpl.class);
        setPropertyRef(groupAttrValueDaoBean, "persistenceManagerFactory", pspPmfBean.getName());

        Bean aclDaoBean = newBean(pspBeans, "acl-dao", JDOAclDAOImpl.class);
        setPropertyRef(aclDaoBean, "persistenceManagerFactory", pspPmfBean.getName());

        Bean aclEntryDaoBean = newBean(pspBeans, "acl-entry-dao" , JDOAclEntryDAOImpl.class);
        setPropertyRef(aclEntryDaoBean, "persistenceManagerFactory", pspPmfBean.getName());

        Bean secTokenDaoBean = newBean(pspBeans, "security-token-dao" , JDOSecurityTokenDAOImpl.class);
        setPropertyRef(secTokenDaoBean, "persistenceManagerFactory", pspPmfBean.getName());

        // Schema Manager
        Bean schemaMgrBean = newBean(pspBeans, pspName + "-schema-mgr", JDOSchemaManager.class);
        setPropertyValue(schemaMgrBean, "schemaName", pspName + "-schema");
        setPropertyRef(schemaMgrBean, "usrAttrDefDao", userAttrDaoBean.getName());
        setPropertyRef(schemaMgrBean, "grpAttrDefDao", groupAttrDaoBean.getName());
        setPropertyRef(schemaMgrBean, "usrAttrValDao", userAttrValueDaoBean.getName());
        setPropertyRef(schemaMgrBean, "grpAttrValDao", groupAttrValueDaoBean.getName());

        setPropertyRef(schemaMgrBean, "transactionManager", txMgrBean.getName());
        
        // Identity Partition
        Bean idPartBean = newBean(pspBeans, pspName + "-idpart", JDOIdentityPartition.class);
        setPropertyValue(idPartBean, "name", idPartBean.getName());
        setPropertyValue(idPartBean, "description", pspName + " identity partition");

        setPropertyRef(idPartBean, "userDao", userDaoBean.getName());
        setPropertyRef(idPartBean, "groupDao", groupDaoBean.getName());
        setPropertyRef(idPartBean, "aclDao", aclDaoBean.getName());
        setPropertyRef(idPartBean, "aclEntryDao", aclEntryDaoBean.getName());
        setPropertyRef(idPartBean, "securityTokenDao", secTokenDaoBean.getName());
        setPropertyRef(idPartBean, "usrAttrValDao", userAttrValueDaoBean.getName());
        setPropertyRef(idPartBean, "grpAttrValDao", groupAttrValueDaoBean.getName());
        setPropertyRef(idPartBean, "securityQuestionDAO", secQuestionDaoBean.getName());
        setPropertyRef(idPartBean, "usrSecQuestionDao", userSecQuestionDaoBean.getName());

        setPropertyRef(idPartBean, "schemaManager", schemaMgrBean.getName());

        setPropertyRef(idPartBean, "transactionManager", txMgrBean.getName());

        // PST
        Bean pstBean = newBean(pspBeans, pspName + "-pst", ProvisioningTargetImpl.class);
        setPropertyValue(pstBean, "name", pstBean.getName());
        // TODO : Add salt support
        // TODO : Make dynamic
        setPropertyValue(pstBean, "hashAlgorithm", "MD5");
        setPropertyValue(pstBean, "hashEncoding", "HEX");
        setPropertyRef(pstBean, "identityPartition", idPartBean.getName());
        setPropertyRef(pstBean, "schemaManager", schemaMgrBean.getName());

        // Identity Vault
        Bean vaultBean = newBean(pspBeans, pspName + "-identity-vault", JDOIdentityVault.class);
        setPropertyValue(vaultBean, "name", vaultBean.getName());
        setPropertyValue(vaultBean, "description", idVault.getDescription());
        addPropertyBeansAsRefs(vaultBean, "identityPartitions", idPartBean);

        // Identity Store
        Bean storeBean = newBean(pspBeans, pspName + "-identity-store", JDOIdentityStore.class);
        setPropertyRef(storeBean, "partition", idPartBean.getName());
        setPropertyRef(idPartBean, "identityStore", storeBean.getName());

        //  Some Wiring

        setPropertyRef(pspChannelBean, "provider", pspBean.getName());

        setPropertyRef(pspBean, "channel", pspChannelBean.getName());

        addPropertyBeansAsRefs(pspBean, "provisioningTargets", pstBean);

        event.getContext().put("pspChannelBean", pspChannelBean);

    }

    @Override
    public Object after(TransformEvent event) throws TransformException {

        DbIdentityVault idVault = (DbIdentityVault) event.getData();
        Beans baseBeans = (Beans) event.getContext().get("beans");

        IdProjectModule module = event.getContext().getCurrentModule();
        Beans pspBeans = (Beans) event.getContext().get("pspBeans");

        Bean pspBean = getBeansOfType(pspBeans, ProvisioningServiceProviderImpl.class.getName()).iterator().next();
        Bean pspChannelBean = (Bean) event.getContext().get("pspChannelBean");

        IdProjectResource<Beans> rBeans = new IdProjectResource<Beans>(idGen.generateId(), pspBean.getName(), pspBean.getName(), "spring-beans", pspBeans);
        rBeans.setClassifier("jaxb");
        rBeans.setNameSpace(pspBean.getName());

        module.addResource(rBeans);

        // Mediation Unit
        Collection<Bean> mus = getBeansOfType(baseBeans, OsgiIdentityMediationUnit.class.getName());
        if (mus.size() == 1) {
            Bean mu = mus.iterator().next();

            java.util.List<Bean> channels = getPropertyBeans(baseBeans, mu, "channels");
            boolean found = false;

            if (channels != null)
                for (Bean bean : channels) {
                    if (getPropertyValue(bean, "name").equals(getPropertyValue(pspChannelBean, "name"))) {
                        found = true;
                        break;
                    }
                }

            if (!found)
                addPropertyBeansAsRefs(mu, "channels", pspChannelBean);

        } else {
            throw new TransformException("One and only one Identity Mediation Unit is expected, found " + mus.size());
        }


        return rBeans;
    }
}
