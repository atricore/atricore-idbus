package com.atricore.idbus.console.lifecycle.main.transform.transformers.selfservices;

import com.atricore.idbus.console.lifecycle.main.domain.IdentityAppliance;
import com.atricore.idbus.console.lifecycle.main.domain.metadata.*;
import com.atricore.idbus.console.lifecycle.main.exception.TransformException;
import com.atricore.idbus.console.lifecycle.main.transform.IdProjectModule;
import com.atricore.idbus.console.lifecycle.main.transform.IdProjectResource;
import com.atricore.idbus.console.lifecycle.main.transform.TransformEvent;
import com.atricore.idbus.console.lifecycle.main.transform.transformers.AbstractTransformer;
import com.atricore.idbus.console.lifecycle.main.transform.transformers.ExecutionEnvironmentProperties;
import com.atricore.idbus.console.lifecycle.support.springmetadata.model.Bean;
import com.atricore.idbus.console.lifecycle.support.springmetadata.model.Beans;
import com.atricore.idbus.console.lifecycle.support.springmetadata.model.Description;
import com.atricore.idbus.console.lifecycle.support.springmetadata.model.Entry;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.atricore.idbus.capabilities.oauth2.common.OAuth2Service;
import org.atricore.idbus.capabilities.oauth2.main.OAuth2BPMediator;
import org.atricore.idbus.capabilities.oauth2.main.binding.OAuth2BindingFactory;
import org.atricore.idbus.capabilities.oauth2.main.binding.logging.OAuth2LogMessageBuilder;
import org.atricore.idbus.capabilities.sso.support.binding.SSOBinding;
import org.atricore.idbus.kernel.main.federation.metadata.CircleOfTrustImpl;
import org.atricore.idbus.kernel.main.federation.metadata.CircleOfTrustManagerImpl;
import org.atricore.idbus.kernel.main.mediation.binding.BindingChannelImpl;
import org.atricore.idbus.kernel.main.mediation.camel.component.logging.CamelLogMessageBuilder;
import org.atricore.idbus.kernel.main.mediation.camel.component.logging.HttpLogMessageBuilder;
import org.atricore.idbus.kernel.main.mediation.camel.logging.DefaultMediationLogger;
import org.atricore.idbus.kernel.main.mediation.endpoint.IdentityMediationEndpointImpl;
import org.atricore.idbus.kernel.main.mediation.osgi.OsgiIdentityMediationUnit;
import org.atricore.idbus.kernel.main.mediation.provider.BindingProviderImpl;

import java.util.*;

import static com.atricore.idbus.console.lifecycle.support.springmetadata.util.BeanUtils.*;

/**
 * @author: sgonzalez@atriocore.com
 * @date: 2/28/13
 */
public class SelfServicesExecEnvTransformer extends AbstractTransformer {

    private static final Log logger = LogFactory.getLog(SelfServicesExecEnvTransformer.class);

    private Map<String, ExecutionEnvironmentProperties> execEnvProperties =
            new HashMap<String, ExecutionEnvironmentProperties>();

    @Override
    public boolean accept(TransformEvent event) {
        // Only act when we're accessed from the root node to avoid duplicates:
        if (!(event.getData() instanceof ExecutionEnvironment))
            return false;

        if (!(event.getContext().getParentNode() instanceof IdentityApplianceDefinition))
            return false;

        ExecutionEnvironment ex = (ExecutionEnvironment) event.getData();

        boolean hasSelfServicesResource = false;
        for (Activation activation : ex.getActivations()) {
            if (activation.getResource() instanceof SelfServicesResource) {
                hasSelfServicesResource = true;
                break;
            }
        }

        return hasSelfServicesResource;

    }

    @Override
    public void before(TransformEvent event) throws TransformException {
        ExecutionEnvironment execEnv = (ExecutionEnvironment) event.getData();

        // Self Services has
        assert execEnv.getActivations().size() == 1 : "Self-Services Resources must have an exclusive execution environment";
        SelfServicesResource selfServicesResource = (SelfServicesResource) execEnv.getActivations().iterator().next().getResource();
        InternalSaml2ServiceProvider sp = selfServicesResource.getServiceConnection().getSp();

        IdentityApplianceDefinition applianceDef = (IdentityApplianceDefinition) event.getContext().getParentNode();
        IdentityAppliance appliance = event.getContext().getProject().getIdAppliance();

        Date now = new Date();
        Beans bpBeans = new Beans();

        // This is a captive execution environment, it means it has a single resource hence a single SP associated.



        Description descr = new Description();
        descr.getContent().add(execEnv.getName() + " : BP Configuration generated by Atricore Identity Bus Server on " + now.toGMTString());
        descr.getContent().add(execEnv.getDescription());

        bpBeans.setDescription(descr);

        Beans baseBeans = (Beans) event.getContext().get("beans");

        // Publish root element so that other transformers can use it.
        event.getContext().put("bpBeans", bpBeans);

        if (logger.isDebugEnabled())
            logger.debug("Generating BP " + execEnv.getName() + " configuration model");

        Bean bpBean = newBean(bpBeans, normalizeBeanName(execEnv.getName()),
                BindingProviderImpl.class.getName());

        // Name
        setPropertyValue(bpBean, "name", bpBean.getName());

        // Role
        setPropertyValue(bpBean, "role", "{urn:org:atricore:idbus:oauth2:metadata}OAuth2AgentDescriptor");

        // unitContainer
        setPropertyRef(bpBean, "unitContainer", applianceDef.getName() + "-container");

        // COT Manager
        Collection<Bean> cotMgrs = getBeansOfType(baseBeans, CircleOfTrustManagerImpl.class.getName());
        if (cotMgrs.size() == 1) {
            Bean cotMgr = cotMgrs.iterator().next();
            setPropertyRef(bpBean, "cotManager", cotMgr.getName());
        }

        // State Manager
        setPropertyRef(bpBean, "stateManager", applianceDef.getName() + "-state-manager");

        // MBean
        Bean mBean = newBean(bpBeans, bpBean.getName() + "-mbean",
                "org.atricore.idbus.capabilities.sso.management.internal.BindingProviderMBeanImpl");
        setPropertyRef(mBean, "bindingProvider", bpBean.getName());

        // MBean Exporter
        Bean mBeanExporter = newBean(bpBeans, bpBean.getName() + "-mbean-exporter", "org.springframework.jmx.export.MBeanExporter");
        setPropertyRef(mBeanExporter, "server", "mBeanServer");

        Bean mBeanEntryKeyBean = newBean(bpBeans, mBean.getName() + "-key", String.class);
        setConstructorArg(mBeanEntryKeyBean, 0, "java.lang.String", appliance.getNamespace() + "." +
                event.getContext().getCurrentModule().getId() + ":type=BindingProvider,name=" + applianceDef.getName() + "." + bpBean.getName());

        Entry mBeanEntry = new Entry();
        mBeanEntry.setKeyRef(mBeanEntryKeyBean.getName());
        mBeanEntry.setValueRef(mBean.getName());

        addEntryToMap(mBeanExporter, "beans", mBeanEntry);

        // Self-Services Binding Channel (Uses OAuth2 Protocol)
        Bean bc = newBean(bpBeans, normalizeBeanName(execEnv.getName()) + "-selfsvcs-binding-channel",
                "org.atricore.idbus.kernel.main.mediation.binding.BindingChannelImpl");
        setPropertyValue(bc, "name", bc.getName());
        setPropertyValue(bc, "description", execEnv.getDescription());
        setPropertyRef(bc, "federatedProvider", bpBean.getName());
        setPropertyRef(bc, "unitContainer", applianceDef.getName() + "-container");


        String locationPath = resolveLocationPath(applianceDef.getLocation()) + "/" + execEnv.getName().toUpperCase();
        String location = resolveLocationBaseUrl(applianceDef.getLocation()) + locationPath;

        setPropertyValue(bc, "location", location);

        setPropertyRef(bc, "unitContainer", applianceDef.getName() + "-container");
        setPropertyRef(bc, "identityMediator", bpBean.getName() + "-binding-mediator");

        // endpoints
        List<Bean> endpoints = new ArrayList<Bean>();

        Bean acsArtifact = newAnonymousBean(IdentityMediationEndpointImpl.class);
        acsArtifact.setName(bpBean.getName() + "-binding-ssop-acs-artifact");
        setPropertyValue(acsArtifact, "name", acsArtifact.getName());
        setPropertyValue(acsArtifact, "type", OAuth2Service.SSOAssertionConsumerService.toString());
        setPropertyValue(acsArtifact, "binding", SSOBinding.SSO_ARTIFACT.getValue());
        setPropertyValue(acsArtifact, "location", "/SSO/ACS/ARTIFACT");
        endpoints.add(acsArtifact);

        Bean ssoRedirect = newAnonymousBean(IdentityMediationEndpointImpl.class);
        ssoRedirect.setName(bpBean.getName() + "-binding-ssop-sso-redir");
        setPropertyValue(ssoRedirect, "name", ssoRedirect.getName());
        setPropertyValue(ssoRedirect, "type", OAuth2Service.SSOSingleSignOnService.toString());
        setPropertyValue(ssoRedirect, "binding", SSOBinding.SSO_REDIRECT.getValue());
        setPropertyValue(ssoRedirect, "location", "/SSO/SSO/REDIR");
        endpoints.add(ssoRedirect);

        setPropertyAsBeans(bc, "endpoints", endpoints);

        setPropertyRef(bpBean, "bindingChannel", bc.getName());


        // binding-mediator
        Bean bindingMediator = newBean(bpBeans, bpBean.getName() + "-binding-mediator", OAuth2BPMediator.class);
        setPropertyValue(bindingMediator, "logMessages", true);
        setPropertyBean(bindingMediator, "bindingFactory", newAnonymousBean(OAuth2BindingFactory.class));

        // artifactQueueManager
        // setPropertyRef(bindingMediator, "artifactQueueManager", applianceDef.getName() + "-aqm");
        setPropertyRef(bindingMediator, "artifactQueueManager", "artifactQueueManager");

        // errorUrl
        setPropertyValue(bindingMediator, "errorUrl", resolveUiErrorLocation(appliance));

        // warningUrl
        setPropertyValue(bindingMediator, "warningUrl", resolveUiWarningLocation(appliance));

        // SAML2 SP Alias (preferred/default idp channel)
        IdentityProviderChannel preferredIdpChannel = null;
        for (FederatedConnection fc : sp.getFederatedConnectionsA()) {
            IdentityProviderChannel idpc = (IdentityProviderChannel) fc.getChannelA();
            if (idpc.isPreferred()) {
                preferredIdpChannel = idpc;
                break;
            }
        }

        if (preferredIdpChannel == null) {
            for (FederatedConnection fc : sp.getFederatedConnectionsB()) {
                IdentityProviderChannel idpc = (IdentityProviderChannel) fc.getChannelB();
                if (idpc.isPreferred()) {
                    preferredIdpChannel = idpc;
                    break;
                }
            }
        }

        String spAlias = resolveLocationUrl(sp, preferredIdpChannel) + "/SAML2/MD";
        setPropertyValue(bindingMediator, "spAlias", spAlias);

        // logger
        List<Bean> bpLogBuilders = new ArrayList<Bean>();
        bpLogBuilders.add(newAnonymousBean(OAuth2LogMessageBuilder.class));
        bpLogBuilders.add(newAnonymousBean(CamelLogMessageBuilder.class));
        bpLogBuilders.add(newAnonymousBean(HttpLogMessageBuilder.class));

        Bean bpLogger = newAnonymousBean(DefaultMediationLogger.class.getName());
        bpLogger.setName(bpBean.getName() + "-mediation-logger");
        setPropertyValue(bpLogger, "category", appliance.getNamespace() + "." + appliance.getName() + ".wire." + bpBean.getName());
        setPropertyAsBeans(bpLogger, "messageBuilders", bpLogBuilders);
        setPropertyBean(bindingMediator, "logger", bpLogger);

        // Resource Server information
        String uiBasePath = "IDBUS-UI";
        Location uiLocation = applianceDef.getUiLocation();
        if (uiLocation != null) {
            uiBasePath = resolveLocationPath(uiLocation);
        }


        IdentityProvider idp = null;
        if (sp.getFederatedConnectionsA() != null && sp.getFederatedConnectionsA().size() > 0)
            idp = (IdentityProvider) sp.getFederatedConnectionsA().iterator().next().getRoleB();
        if (sp.getFederatedConnectionsB() != null && sp.getFederatedConnectionsB().size() > 0)
            idp = (IdentityProvider) sp.getFederatedConnectionsB().iterator().next().getRoleA();

        if (idp == null) {
            throw new TransformException("Cannot find an IDP for resource " + selfServicesResource.getName());
        }

        Bean rServerBean = newAnonymousBean(org.atricore.idbus.capabilities.oauth2.main.ResourceServer.class);

        // Josso 'agent' ACS
        String resourceLocation = resolveLocationBaseUrl(applianceDef.getLocation()) +
                "/" + uiBasePath + "/" +
                applianceDef.getName().toUpperCase() + "/" +
                idp.getName().toUpperCase() +
                "/SSO/AGENT/SECURITY_CHECK";

        setPropertyValue(rServerBean, "resourceLocation", resourceLocation);
        setPropertyValue(rServerBean, "name", execEnv.getName());
        setPropertyValue(rServerBean, "sharedSecret", idp.getOauth2Key());
        setPropertyValue(rServerBean, "accessTokenParam", "access_token");

        setPropertyBean(bindingMediator, "resourceServer", rServerBean);

    }

    @Override
    public Object after(TransformEvent event) throws TransformException {
        IdProjectModule module = event.getContext().getCurrentModule();
        Beans baseBeans = (Beans) event.getContext().get("beans");
        Beans bpBeans = (Beans) event.getContext().get("bpBeans");

        Bean bpBean = getBeansOfType(bpBeans, BindingProviderImpl.class.getName()).iterator().next();

        if (logger.isDebugEnabled())
            logger.debug("Wiring BP Provider/Channel with mediation components ("+bpBean.getName()+")");

        // Wire provider to COT
        Collection<Bean> cots = getBeansOfType(baseBeans, CircleOfTrustImpl.class.getName());
        if (cots.size() == 1) {
            Bean cot = cots.iterator().next();
            addPropertyBeansAsRefsToSet(cot, "providers", bpBean);
        }

        // Mediation Unit for binding channel
        Collection<Bean> mus = getBeansOfType(baseBeans, OsgiIdentityMediationUnit.class.getName());
        if (mus.size() == 1) {
            Bean mu = mus.iterator().next();
            Collection<Bean> bindingChannels = getBeansOfType(bpBeans, BindingChannelImpl.class.getName());
            for (Bean b : bindingChannels) {
                addPropertyBeansAsRefs(mu, "channels", b);
            }
        } else {
            throw new TransformException("One and only one Identity Mediation Unit is expected, found " + mus.size());
        }

        IdProjectResource<Beans> rBeans =  new IdProjectResource<Beans>(idGen.generateId(),
                bpBean.getName(),
                bpBean.getName(),
                "spring-beans",
                bpBeans);

        rBeans.setClassifier("jaxb");

        module.addResource(rBeans);

        return rBeans;

    }

}
