package com.atricore.idbus.console.lifecycle.main.transform.transformers.idsource;

import com.atricore.idbus.console.lifecycle.main.domain.IdentityAppliance;
import com.atricore.idbus.console.lifecycle.main.domain.metadata.EmbeddedIdentityVault;
import com.atricore.idbus.console.lifecycle.main.exception.TransformException;
import com.atricore.idbus.console.lifecycle.main.transform.IdProjectModule;
import com.atricore.idbus.console.lifecycle.main.transform.IdProjectResource;
import com.atricore.idbus.console.lifecycle.main.transform.TransformEvent;
import com.atricore.idbus.console.lifecycle.main.transform.transformers.AbstractTransformer;
import com.atricore.idbus.console.lifecycle.support.springmetadata.model.Bean;
import com.atricore.idbus.console.lifecycle.support.springmetadata.model.Beans;

import com.atricore.idbus.console.lifecycle.support.springmetadata.model.osgi.Reference;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.atricore.idbus.kernel.main.mediation.provider.ProvisioningServiceProviderImpl;
import org.atricore.idbus.kernel.main.provisioning.exception.ProvisioningException;
import org.atricore.idbus.kernel.main.provisioning.spi.IdentityConnector;
import org.atricore.idbus.kernel.main.provisioning.spi.IdentityVaultManager;
import org.atricore.idbus.kernel.main.provisioning.spi.ProvisioningTarget;
import org.atricore.idbus.kernel.main.store.identity.IdentityPartitionStore;

import java.util.Date;

import static com.atricore.idbus.console.lifecycle.support.springmetadata.util.BeanUtils.getBeansOfType;
import static com.atricore.idbus.console.lifecycle.support.springmetadata.util.BeanUtils.newBeans;

/**
 * @author <a href=mailto:sgonzalez@atricore.org>Sebastian Gonzalez Oyuela</a>
 */
public class EmbeddedIdentityVaultTransformer extends AbstractTransformer {

    private static final Log logger = LogFactory.getLog(DbIdentityVaultTransformer.class);

    private IdentityVaultManager identityVaultManager;

    public IdentityVaultManager getIdentityVaultManager() {
        return identityVaultManager;
    }

    public void setIdentityVaultManager(IdentityVaultManager identityVaultManager) {
        this.identityVaultManager = identityVaultManager;
    }

    @Override
    public boolean accept(TransformEvent event) {
        if (event.getData() instanceof EmbeddedIdentityVault) {
            return true;
        }
        return false;
    }

    @Override
    public void before(TransformEvent event) throws TransformException {

        try {
            EmbeddedIdentityVault idVault = (EmbeddedIdentityVault) event.getData();

            IdentityConnector idConn = identityVaultManager.lookupByName(idVault.getIdentityConnectorName());

            Beans pspBeans = newBeans(idVault.getName() + " : PSP Configuration generated by Atricore Identity Bus Server on " + new Date().toGMTString());
            Beans baseBeans = (Beans) event.getContext().get("beans");
            Beans beansOsgi = (Beans) event.getContext().get("beansOsgi");

            String idauPath = (String) event.getContext().get("idauPath");

            // Publish root element so that other transformers can use it.
            event.getContext().put("pspBeans", pspBeans);

            if (logger.isDebugEnabled())
                logger.debug("Generating PSP " + idVault.getName() + " configuration model");

            IdentityAppliance appliance = event.getContext().getProject().getIdAppliance();

            String pspName = normalizeBeanName(idVault.getName());
            String storeName = pspName + "-identity-store";

            Reference identityStoreOsgi = new Reference();
            identityStoreOsgi.setId(storeName);
            identityStoreOsgi.setInterface(IdentityPartitionStore.class.getName());
            identityStoreOsgi.setCardinality("1..1");
            identityStoreOsgi.setTimeout(20L);
            identityStoreOsgi.setFilter("(&(storeName=" + idConn.getStoreName() + "))");

            pspBeans.getImportsAndAliasAndBeen().add(identityStoreOsgi);

            // Add Provisioning target definition for IdPs

            Reference provisioningTargetOsgi = new Reference();
            provisioningTargetOsgi.setId(pspName + "-pst");
            provisioningTargetOsgi.setInterface(ProvisioningTarget.class.getName());
            provisioningTargetOsgi.setCardinality("1..1");
            provisioningTargetOsgi.setTimeout(20L);
            provisioningTargetOsgi.setFilter("(&(pstName=" + idConn.getTarget().getName() + "))");

            pspBeans.getImportsAndAliasAndBeen().add(provisioningTargetOsgi);
        } catch (ProvisioningException e) {
            throw new TransformException(e);
        }

    }

    @Override
    public Object after(TransformEvent event) throws TransformException {
        EmbeddedIdentityVault idVault = (EmbeddedIdentityVault) event.getData();
        Beans baseBeans = (Beans) event.getContext().get("beans");

        IdProjectModule module = event.getContext().getCurrentModule();
        Beans pspBeans = (Beans) event.getContext().get("pspBeans");

        Bean pspChannelBean = (Bean) event.getContext().get("pspChannelBean");

        IdProjectResource<Beans> rBeans = new IdProjectResource<Beans>(idGen.generateId(), normalizeBeanName(idVault.getName()), normalizeBeanName(idVault.getName()), "spring-beans", pspBeans);
        rBeans.setClassifier("jaxb");
        rBeans.setNameSpace(normalizeBeanName(idVault.getName()));

        module.addResource(rBeans);


        return null;
    }
}
