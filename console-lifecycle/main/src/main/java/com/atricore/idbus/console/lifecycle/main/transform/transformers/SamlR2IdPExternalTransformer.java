package com.atricore.idbus.console.lifecycle.main.transform.transformers;

import com.atricore.idbus.console.lifecycle.main.domain.metadata.Saml2IdentityProvider;
import com.atricore.idbus.console.lifecycle.main.exception.TransformException;
import com.atricore.idbus.console.lifecycle.main.transform.IdProjectModule;
import com.atricore.idbus.console.lifecycle.main.transform.IdProjectResource;
import com.atricore.idbus.console.lifecycle.main.transform.TransformEvent;
import com.atricore.idbus.console.lifecycle.main.util.MetadataUtil;
import com.atricore.idbus.console.lifecycle.support.springmetadata.model.Bean;
import com.atricore.idbus.console.lifecycle.support.springmetadata.model.Beans;
import com.atricore.idbus.console.lifecycle.support.springmetadata.model.Description;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.atricore.idbus.capabilities.sso.main.SamlR2MetadataDefinitionIntrospector;
import org.atricore.idbus.capabilities.sso.support.metadata.SSOMetadataConstants;
import org.atricore.idbus.kernel.main.federation.metadata.CircleOfTrustImpl;
import org.atricore.idbus.kernel.main.federation.metadata.MetadataDefinition;
import org.atricore.idbus.kernel.main.federation.metadata.ResourceCircleOfTrustMemberDescriptorImpl;
import org.atricore.idbus.kernel.main.mediation.provider.FederatedRemoteProviderImpl;
import org.atricore.idbus.kernel.main.util.HashGenerator;

import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import static com.atricore.idbus.console.lifecycle.support.springmetadata.util.BeanUtils.*;

/**
 * @author <a href=mailto:sgonzalez@atricore.org>Sebastian Gonzalez Oyuela</a>
 */
public class SamlR2IdPExternalTransformer extends AbstractTransformer {

    private static final Log logger = LogFactory.getLog(SamlR2IdPExternalTransformer.class);

    @Override
    public boolean accept(TransformEvent event) {
        return event.getData() instanceof Saml2IdentityProvider;
    }

    @Override
    public void before(TransformEvent event) throws TransformException {

        Saml2IdentityProvider provider = (Saml2IdentityProvider) event.getData();

        Date now = new Date();

        Beans idpBeans = new Beans();

        Description descr = new Description();
        descr.getContent().add(provider.getName() + " : IdP Configuration generated by Atricore Identity Bus Server on " + now.toGMTString());
        descr.getContent().add(provider.getDescription());

        Beans baseBeans = (Beans) event.getContext().get("beans");
        String idauPath = (String) event.getContext().get("idauPath");

        idpBeans.setDescription(descr);

        // Publish root element so that other transformers can use it.
        event.getContext().put("idpBeans", idpBeans);

        if (logger.isDebugEnabled())
            logger.debug("Generating IdP " + provider.getName() + " configuration model");

        // Define all required beans! (We can break down this in the future ...)

        // ----------------------------------------
        // Identity Provider
        // ----------------------------------------

        Bean idp = newBean(idpBeans, normalizeBeanName(provider.getName()),
                FederatedRemoteProviderImpl.class.getName());

        // Name
        setPropertyValue(idp, "name", idp.getName());

        // Role
        setPropertyValue(idp, "role", SSOMetadataConstants.IDPSSODescriptor_QNAME.toString());

        // Wire provider to COT
        Collection<Bean> cots = getBeansOfType(baseBeans, CircleOfTrustImpl.class.getName());
        if (cots.size() == 1) {
            Bean cot = cots.iterator().next();
            setPropertyRef(idp, "circleOfTrust", cot.getName());
        }

        // ResourceCircleOfTrustMemberDescriptor
        Bean idpMd = newBean(idpBeans, idp.getName() + "-md", ResourceCircleOfTrustMemberDescriptorImpl.class);
        String alias;
        try {
            MetadataDefinition md = MetadataUtil.loadMetadataDefinition(provider.getMetadata().getValue());
            alias = MetadataUtil.findEntityId(md);
        } catch (Exception e) {
            throw new TransformException("Error loading metadata definition for " + provider.getName());
        }
        try {
            setPropertyValue(idpMd, "id", HashGenerator.sha1(alias));
        } catch (UnsupportedEncodingException e) {
            throw new TransformException("Error generating SHA-1 hash for alias '" + alias + "': unsupported encoding");
        } catch (NoSuchAlgorithmException e) {
            throw new TransformException("Error generating SHA-1 hash for alias '" + alias + "': no such algorithm");
        }
        setPropertyValue(idpMd, "alias", alias);
        setPropertyValue(idpMd, "resource", "classpath:" + idauPath + idp.getName() + "/" + idp.getName() + "-samlr2-metadata.xml");
        Bean mdIntrospector = newAnonymousBean(SamlR2MetadataDefinitionIntrospector.class);
        setPropertyBean(idpMd, "metadataIntrospector", mdIntrospector);

        // members
        addPropertyBeansAsRefs(idp, "members", idpMd);

        // metadata file
        IdProjectResource<byte[]> metadataResource = new IdProjectResource<byte[]>(idGen.generateId(),
                idauPath + idp.getName() + "/", idp.getName() + "-samlr2-metadata.xml",
                "binary", provider.getMetadata().getValue());
        metadataResource.setClassifier("byte");
        event.getContext().getCurrentModule().addResource(metadataResource);
    }

    @Override
    public Object after(TransformEvent event) throws TransformException {

        Saml2IdentityProvider provider = (Saml2IdentityProvider) event.getData();
        IdProjectModule module = event.getContext().getCurrentModule();
        Beans baseBeans = (Beans) event.getContext().get("beans");
        Beans idpBeans = (Beans) event.getContext().get("idpBeans");

        Bean idpBean = getBeansOfType(idpBeans, FederatedRemoteProviderImpl.class.getName()).iterator().next();

        // Wire provider to COT
        Collection<Bean> cots = getBeansOfType(baseBeans, CircleOfTrustImpl.class.getName());
        if (cots.size() == 1) {
            Bean cot = cots.iterator().next();
            addPropertyBeansAsRefsToSet(cot, "providers", idpBean);
            String dependsOn = cot.getDependsOn();
            if (dependsOn == null || dependsOn.equals("")) {
                cot.setDependsOn(idpBean.getName());
            } else {
                cot.setDependsOn(dependsOn + "," + idpBean.getName());
            }
        }

        IdProjectResource<Beans> rBeans =  new IdProjectResource<Beans>(idGen.generateId(), idpBean.getName(), idpBean.getName(), "spring-beans", idpBeans);
        rBeans.setClassifier("jaxb");
        rBeans.setNameSpace(idpBean.getName());

        Set<IdProjectResource<Beans>> rBeansSet = (Set<IdProjectResource<Beans>>) event.getContext().get("bean-projects");
        if (rBeansSet == null) {
            rBeansSet = new HashSet<IdProjectResource<Beans>>();
            event.getContext().put("bean-projects", rBeansSet);
        }

        rBeansSet.add(rBeans);

        module.addResource(rBeans);

        return rBeansSet;
    }
}
