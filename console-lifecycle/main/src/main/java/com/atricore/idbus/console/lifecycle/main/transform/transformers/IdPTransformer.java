package com.atricore.idbus.console.lifecycle.main.transform.transformers;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import com.atricore.idbus.console.lifecycle.main.domain.metadata.IdentityProvider;
import com.atricore.idbus.console.lifecycle.main.domain.metadata.ProviderRole;
import com.atricore.idbus.console.lifecycle.main.exception.TransformException;
import com.atricore.idbus.console.lifecycle.main.domain.metadata.SamlR2ProviderConfig;
import com.atricore.idbus.console.lifecycle.main.transform.IdProjectModule;
import com.atricore.idbus.console.lifecycle.main.transform.IdProjectResource;
import com.atricore.idbus.console.lifecycle.main.transform.TransformEvent;
import com.atricore.idbus.console.lifecycle.support.springmetadata.model.*;
import org.atricore.idbus.capabilities.samlr2.main.SamlR2CircleOfTrustManager;
import org.atricore.idbus.capabilities.samlr2.main.binding.SamlR2BindingFactory;
import org.atricore.idbus.capabilities.samlr2.main.binding.logging.SSOLogMessageBuilder;
import org.atricore.idbus.capabilities.samlr2.main.binding.logging.SamlR2LogMessageBuilder;
import org.atricore.idbus.capabilities.samlr2.main.idp.IdPSessionEventListener;
import org.atricore.idbus.capabilities.samlr2.main.idp.SamlR2IDPMediator;
import org.atricore.idbus.capabilities.samlr2.support.core.SamlR2KeystoreKeyResolver;
import org.atricore.idbus.capabilities.samlr2.support.core.encryption.XmlSecurityEncrypterImpl;
import org.atricore.idbus.capabilities.samlr2.support.core.signature.JSR105SamlR2SignerImpl;
import org.atricore.idbus.capabilities.samlr2.support.metadata.SAMLR2MetadataConstants;
import org.atricore.idbus.kernel.main.federation.metadata.CircleOfTrustImpl;
import org.atricore.idbus.kernel.main.federation.metadata.ResourceCircleOfTrustMemberDescriptorImpl;
import org.atricore.idbus.kernel.main.mediation.camel.component.logging.CamelLogMessageBuilder;
import org.atricore.idbus.kernel.main.mediation.camel.component.logging.HttpLogMessageBuilder;
import org.atricore.idbus.kernel.main.mediation.camel.logging.DefaultMediationLogger;
import org.atricore.idbus.kernel.main.mediation.channel.SPChannelImpl;
import org.atricore.idbus.kernel.main.mediation.provider.IdentityProviderImpl;
import org.atricore.idbus.kernel.main.session.SSOSessionEventManager;

import java.util.*;
import java.util.List;

import static com.atricore.idbus.console.lifecycle.support.springmetadata.util.BeanUtils.*;
import static com.atricore.idbus.console.lifecycle.support.springmetadata.util.BeanUtils.newAnonymousBean;
import static com.atricore.idbus.console.lifecycle.support.springmetadata.util.BeanUtils.newBean;

/**
 * @author <a href="mailto:sgonzalez@atricore.org">Sebastian Gonzalez Oyuela</a>
 * @version $Id$
 */
public class IdPTransformer extends AbstractTransformer {

    private static final Log logger = LogFactory.getLog(IdPTransformer.class);

    @Override
    public boolean accept(TransformEvent event) {
        return event.getData() instanceof IdentityProvider;
    }

    @Override
    public void before(TransformEvent event) throws TransformException {

        IdentityProvider provider = (IdentityProvider) event.getData();

        Date now = new Date();
        Beans idpBeans = newBeans(provider.getName() + " : IdP Configuration generated by Atricore Identity Bus Server on " + now.toGMTString());
        Beans baseBeans = (Beans) event.getContext().get("beans");
        Beans beansOsgi = (Beans) event.getContext().get("beansOsgi");

        String baseIdauDestPath = (String) event.getContext().get("baseIdauDestPath");

        // Publish root element so that other transformers can use it.
        event.getContext().put("idpBeans", idpBeans);

        if (logger.isDebugEnabled())
            logger.debug("Generating IDP " + provider.getName() + " configuration model");

        // Define all required beans! (We cab break down this in the future ...)

        // ----------------------------------------
        // Identity Provider
        // ----------------------------------------

        Bean idp = newBean(idpBeans, normalizeBeanName(provider.getName()),
                IdentityProviderImpl.class.getName());

        // Name
        setPropertyValue(idp, "name", idp.getName());

        // Role
        if (!provider.getRole().equals(ProviderRole.SSOIdentityProvider)) {
            logger.warn("Provider "+provider.getId()+" is not defined as IdP, forcing role! ");
        }
        setPropertyValue(idp, "role", SAMLR2MetadataConstants.IDPSSODescriptor_QNAME.toString());
        
        // unitContainer
        setPropertyRef(idp, "unitContainer", event.getContext().getCurrentModule().getId() + "-container");

        // COT Manager
        Collection<Bean> cotMgrs = getBeansOfType(baseBeans, SamlR2CircleOfTrustManager.class.getName());
        if (cotMgrs.size() == 1) {
            Bean cotMgr = cotMgrs.iterator().next();
            setPropertyRef(idp, "cotManager", cotMgr.getName());
        }

        // State Manager
        setPropertyRef(idp, "stateManager", event.getContext().getCurrentModule().getId() + "-state-manager");

        // ----------------------------------------
        // Identity Provider Mediator
        // ----------------------------------------
        Bean idpMediator = newBean(idpBeans, idp.getName() + "-samlr2-mediator",
                SamlR2IDPMediator.class.getName());
        setPropertyValue(idpMediator, "logMessages", true);

        // artifactQueueManager
        setPropertyRef(idpMediator, "artifactQueueManager", event.getContext().getCurrentModule().getId() + "-aqm");

        // bindingFactory
        setPropertyBean(idpMediator, "bindingFactory", newAnonymousBean(SamlR2BindingFactory.class));

        // logger
        List<Bean> idpLogBuilders = new ArrayList<Bean>();
        idpLogBuilders.add(newAnonymousBean(SamlR2LogMessageBuilder.class));
        idpLogBuilders.add(newAnonymousBean(SSOLogMessageBuilder.class));
        idpLogBuilders.add(newAnonymousBean(CamelLogMessageBuilder.class));
        idpLogBuilders.add(newAnonymousBean(HttpLogMessageBuilder.class));

        Bean idpLogger = newAnonymousBean(DefaultMediationLogger.class.getName());
        idpLogger.setName(idp.getName() + "-mediation-logger");
        setPropertyValue(idpLogger, "category", "org.atricore.idbus.mediation.wire." + idp.getName());
        setPropertyAsBeans(idpLogger, "messageBuilders", idpLogBuilders);
        setPropertyBean(idpMediator, "logger", idpLogger);
        
        // errorUrl
        setPropertyValue(idpMediator, "errorUrl", resolveLocationBaseUrl(provider) + "/idbus-ui/error.do");

        SamlR2ProviderConfig cfg = (SamlR2ProviderConfig) provider.getConfig();

        // ----------------------------------------
        // Signer
        // ----------------------------------------
        if (cfg != null && cfg.getSigner() != null) {

            String signerResourceFileName = cfg.getSigner().getStore().getName() + "." +
                    ("PKCS#12".equalsIgnoreCase(cfg.getSigner().getType()) ? "pkcs12" : "jks");

            IdProjectResource<byte[]> signerResource = new IdProjectResource<byte[]>(idGen.generateId(),
                    baseIdauDestPath + idp.getName() + "/", signerResourceFileName,
                    "binary", cfg.getSigner().getStore().getValue());
            signerResource.setClassifier("byte");

            Bean signer = newBean(idpBeans, idp.getName() + "-samlr2-signer", JSR105SamlR2SignerImpl.class);
            signer.setInitMethod("init");

            Description signerDescr = new Description();
            signerDescr.getContent().add(cfg.getSigner().getDisplayName());
            signer.setDescription(signerDescr);

            Bean keyResolver = newAnonymousBean(SamlR2KeystoreKeyResolver.class);
            setPropertyValue(keyResolver, "keystoreType", cfg.getSigner().getType());
            setPropertyValue(keyResolver, "keystoreFile", "classpath:" + baseIdauDestPath + idp.getName() + "/" + signerResourceFileName);
            setPropertyValue(keyResolver, "keystorePass", cfg.getSigner().getPassword());
            setPropertyValue(keyResolver, "privateKeyAlias", cfg.getSigner().getPrivateKeyName());
            setPropertyValue(keyResolver, "privateKeyPass", cfg.getSigner().getPrivateKeyPassword());
            setPropertyValue(keyResolver, "certificateAlias", cfg.getSigner().getCertificateAlias());

            setPropertyBean(signer, "keyResolver", keyResolver);
            setPropertyBean(idpMediator, "signer", signer);

            event.getContext().getCurrentModule().addResource(signerResource);
            
            // signer
            setPropertyRef(idpMediator, "signer", signer.getName());
        }

        // ----------------------------------------
        // Encrypter
        // ----------------------------------------
        if (cfg != null && cfg.getEncrypter() != null) {

            String encrypterResourceFileName = cfg.getSigner().getStore().getName() + "." +
                    ("PKCS#12".equalsIgnoreCase(cfg.getSigner().getType()) ? "pkcs12" : "jks");

            IdProjectResource<byte[]> encrypterResource = new IdProjectResource<byte[]>(idGen.generateId(),
                    baseIdauDestPath + idp.getName() + "/", encrypterResourceFileName,
                    "binary", cfg.getSigner().getStore().getValue());
            encrypterResource.setClassifier("byte");
            
            Bean encrypter = newBean(idpBeans, idp.getName() + "-samlr2-encrypter", XmlSecurityEncrypterImpl.class);

            setPropertyValue(encrypter, "symmetricKeyAlgorithmURI", "http://www.w3.org/2001/04/xmlenc#aes128-cbc");
            setPropertyValue(encrypter, "kekAlgorithmURI", "http://www.w3.org/2001/04/xmlenc#rsa-1_5");
            
            Bean keyResolver = newAnonymousBean(SamlR2KeystoreKeyResolver.class);
            setPropertyValue(keyResolver, "keystoreType", cfg.getEncrypter().getType());
            setPropertyValue(keyResolver, "keystoreFile", "classpath:" + baseIdauDestPath + idp.getName() + "/" + encrypterResourceFileName);
            setPropertyValue(keyResolver, "keystorePass", cfg.getEncrypter().getPassword());
            setPropertyValue(keyResolver, "privateKeyAlias", cfg.getEncrypter().getPrivateKeyName());
            setPropertyValue(keyResolver, "privateKeyPass", cfg.getEncrypter().getPrivateKeyPassword());
            setPropertyValue(keyResolver, "certificateAlias", cfg.getEncrypter().getCertificateAlias());

            setPropertyBean(encrypter, "keyResolver", keyResolver);
            setPropertyBean(idpMediator, "encrypter", encrypter);

            event.getContext().getCurrentModule().addResource(encrypterResource);

            // encrypter
            setPropertyRef(idpMediator, "encrypter", encrypter.getName());
        }
        
        Bean idpMd = newBean(idpBeans, idp.getName() + "-md", ResourceCircleOfTrustMemberDescriptorImpl.class);
        setPropertyValue(idpMd, "id", idpMd.getName());
        setPropertyValue(idpMd, "alias", resolveLocationUrl(provider) + "/SAML2/MD");
        setPropertyValue(idpMd, "resource", "classpath:" + baseIdauDestPath + idp.getName() + "/" + idp.getName() + "-samlr2-metadata.xml");
        
        // ----------------------------------------
        // MBean
        // ----------------------------------------
        Bean mBean = newBean(idpBeans, idp.getName() + "-mbean", "org.atricore.idbus.capabilities.samlr2.management.internal.IdentityProviderMBeanImpl");
        setPropertyRef(mBean, "identityProvider", idp.getName());

        Bean mBeanExporter = newBean(idpBeans, idp.getName() + "-mbean-exporter", "org.springframework.jmx.export.MBeanExporter");
        setPropertyRef(mBeanExporter, "server", "mBeanServer");

        // mbeans
        List<Entry> mBeans = new ArrayList<Entry>();

        Bean mBeanKey = newBean(idpBeans, mBean.getName() + "-key", String.class);
        setConstructorArg(mBeanKey, "java.lang.String", "org.atricore.idbus." +
                event.getContext().getCurrentModule().getId() +
                ":type=IdentityProvider,name=" + idp.getName());

        Entry mBeanEntry = new Entry();
        mBeanEntry.setKeyRef(mBeanKey.getName());
        mBeanEntry.setValueRef(mBean.getName());
        mBeans.add(mBeanEntry);

        setPropertyAsMapEntries(mBeanExporter, "beans", mBeans);
        
        // mbean assembler
        /*Bean mBeanAssembler = newAnonymousBean("org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler");

        List<Prop> props = new ArrayList<Prop>();

        Prop prop = new Prop();
        prop.setKey("org.atricore.idbus." + event.getContext().getCurrentModule().getId() +
                ":type=IdentityProvider,name=" + idp.getName());
        prop.getContent().add("listSessions,listSessionsAsTable,listUserSessions,listUserSessionsAsTable,invalidateSession,invalidateAllSessions,invalidateUserSessions,getMaxInactiveInterval,listStatesAsTable,listStateEntriesAsTable");
        props.add(prop);
        
        setPropertyValue(mBeanAssembler, "methodMappings", props);
        
        setPropertyBean(mBeanExporter, "assembler", mBeanAssembler);*/

        // -------------------------------------------------------
        // Define Session Manager bean
        // -------------------------------------------------------
        Bean sessionManager = newBean(idpBeans, idp.getName() + "-session-manager",
                "org.atricore.idbus.kernel.main.session.service.SSOSessionManagerImpl");

        // Properties
        setPropertyValue(sessionManager, "maxInactiveInterval", "30");
        setPropertyValue(sessionManager, "maxSessionsPerUser", "-1");
        setPropertyValue(sessionManager, "invalidateExceedingSessions", "false");
        setPropertyValue(sessionManager, "sessionMonitorInterval", "10000");

        // Session ID Generator
        Bean sessionIdGenerator = newAnonymousBean("org.atricore.idbus.kernel.main.session.service.SessionIdGeneratorImpl");
        setPropertyValue(sessionIdGenerator, "algorithm", "MD5");
        
        // Session Store
        //Bean sessionStore = newAnonymousBean("org.atricore.idbus.idojos.memorysessionstore.MemorySessionStore");
        Bean sessionStore = newAnonymousBean("org.atricore.idbus.idojos.ehcachesessionstore.EHCacheSessionStore");
        sessionStore.setInitMethod("init");
        setPropertyRef(sessionStore, "cacheManager", event.getContext().getCurrentModule().getId() + "-cache-manager");
        setPropertyValue(sessionStore, "cacheName", event.getContext().getCurrentModule().getId() +
                "-" + idp.getName() + "-sessionsCache");
        
        // Wiring
        setPropertyBean(sessionManager, "sessionIdGenerator", sessionIdGenerator);
        setPropertyBean(sessionManager, "sessionStore", sessionStore);
    }

    @Override
    public Object after(TransformEvent event) throws TransformException {

        IdentityProvider provider = (IdentityProvider) event.getData();
        IdProjectModule module = event.getContext().getCurrentModule();
        Beans baseBeans = (Beans) event.getContext().get("beans");
        Beans idpBeans = (Beans) event.getContext().get("idpBeans");

        Bean idpBean = getBeansOfType(idpBeans, IdentityProviderImpl.class.getName()).iterator().next();

        List<Bean> bc = new ArrayList<Bean>();

        // Wire SP Channels
        Collection<Bean> channels = getBeansOfType(idpBeans, SPChannelImpl.class.getName());
        for (Bean b : channels) {
            String channelProvider = getPropertyRef(b, "provider");
            if (channelProvider != null && !channelProvider.equals(idpBean.getName())) {
                bc.add(b);
            } else {
                setPropertyRef(idpBean, "channel", b.getName());
            }
        }

        if (bc.size() > 0)
            setPropertyAsRefs(idpBean, "channels", bc);

        // Wire provider to COT
        Collection<Bean> cots = getBeansOfType(baseBeans, CircleOfTrustImpl.class.getName());
        if (cots.size() == 1) {
            Bean cot = cots.iterator().next();
            addPropertyBeansAsRefsToSet(cot, "providers", idpBean);
            String dependsOn = cot.getDependsOn();
            if (dependsOn == null || dependsOn.equals("")) {
                cot.setDependsOn(idpBean.getName());
            } else {
                cot.setDependsOn(dependsOn + "," + idpBean.getName());
            }
        }

        // Wire session event listener
        Collection<Bean> sessionEventManagers = getBeansOfType(baseBeans, SSOSessionEventManager.class.getName());
        if (sessionEventManagers.size() == 1) {
            Bean sessionEventManager = sessionEventManagers.iterator().next();
            Bean idpListener = newAnonymousBean(IdPSessionEventListener.class);
            setPropertyRef(idpListener, "identityProvider", idpBean.getName());
            addPropertyBean(sessionEventManager, "listeners", idpListener);
        }

        IdProjectResource<Beans> rBeans =  new IdProjectResource<Beans>(idGen.generateId(), idpBean.getName(), idpBean.getName(), "spring-beans", idpBeans);
        rBeans.setClassifier("jaxb");
        rBeans.setNameSpace(idpBean.getName());

        module.addResource(rBeans);

        return rBeans;
    }
}
