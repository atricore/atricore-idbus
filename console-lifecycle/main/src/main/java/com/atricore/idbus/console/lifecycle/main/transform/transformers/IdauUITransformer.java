package com.atricore.idbus.console.lifecycle.main.transform.transformers;

import com.atricore.idbus.console.lifecycle.main.domain.IdentityAppliance;
import com.atricore.idbus.console.lifecycle.main.domain.metadata.IdentityApplianceDefinition;
import com.atricore.idbus.console.lifecycle.main.domain.metadata.Location;
import com.atricore.idbus.console.lifecycle.main.transform.*;
import com.atricore.idbus.console.lifecycle.support.springmetadata.model.Beans;
import com.atricore.idbus.console.lifecycle.support.springmetadata.model.pax.wicket.Application;
import com.atricore.idbus.console.lifecycle.support.springmetadata.model.pax.wicket.ContextParam;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import static com.atricore.idbus.console.lifecycle.support.springmetadata.util.BeanUtils.newBeans;

/**
 * @author <a href=mailto:sgonzalez@atricore.org>Sebastian Gonzalez Oyuela</a>
 */
public class IdauUITransformer extends AbstractTransformer {

    private static Log logger = LogFactory.getLog(IdauBaseComponentsTransformer.class);

    @Override
    public boolean accept(TransformEvent event) {
        return event.getData() instanceof IdentityApplianceDefinition;
    }

    @Override
    public void before(TransformEvent event) {

        IdentityApplianceDefinition ida = (IdentityApplianceDefinition) event.getData();
        IdentityAppliance appliance = event.getContext().getProject().getIdAppliance();
        IdApplianceTransformationContext context = event.getContext();
        IdProjectModule module = context.getCurrentModule();

        Date now = new Date();

        // ----------------------------------------
        // Work-around for pax-wicket 305, create a dummy class in the bundle.
        String ns = event.getContext().get("idaBasePath") + "/idau/ui";
        String pkg = toPackageName(ns);

        IdProjectSource s = new IdProjectSource("Dummy", ns, "Dummy", "java", "dummy");
        s.setExtension("java");
        s.setClassifier("velocity");

        java.util.Map<String, Object> params = new HashMap<String, Object>();
        params.put("package", pkg);
        s.setParams(params);
        module.addSource(s);
        // ----------------------------------------

        // ----------------------------------------
        // UI Beans
        // ----------------------------------------

        Beans idauBeansUi = newBeans(ida.getName() + " UI : IdAU Configuration generated by Atricore Console on " + now.toGMTString());
        String uiBasePath = "/IDBUS-UI";
        Location uiLocation = ida.getUiLocation();
        if (uiLocation != null) {
            uiBasePath = resolveLocationPath(uiLocation);
        }

        // Branding configuration
        // If the appliance has a defined skin, configure it for this application!
        List<ContextParam> appParams = new ArrayList<ContextParam>();
        if (ida.getUserDashboardBranding() != null) {

            ContextParam branding = new ContextParam();
            branding.setParamName("branding");
            branding.setParamValue(ida.getUserDashboardBranding().getId());
            appParams.add(branding);


            if (ida.getUserDashboardBranding().getSkin() != null) {

                if (logger.isDebugEnabled())
                    logger.debug("Using 'SKIN' " + ida.getUserDashboardBranding().getSkin() + " from branding " + ida.getUserDashboardBranding().getId());

                ContextParam skin = new ContextParam();
                skin.setParamName("skin");
                skin.setParamValue(ida.getUserDashboardBranding().getSkin());
                appParams.add(skin);
            }


        }


        // ----------------------------------------
        // SSO Capability application
        // ----------------------------------------
        Application ssoUiApp = new Application();
        ssoUiApp.setId(ida.getName().toLowerCase() + "-sso-ui");
        ssoUiApp.setApplicationName(ida.getName().toLowerCase() + "-sso-ui");
        ssoUiApp.setClazz("org.atricore.idbus.capabilities.sso.ui.internal.SSOUIApplication");
        ssoUiApp.setMountPoint(uiBasePath + "/" + ida.getName().toUpperCase() + "/SSO");
        ssoUiApp.getContextParams().addAll(appParams);

        idauBeansUi.getImportsAndAliasAndBeen().add(ssoUiApp);

        // ----------------------------------------
        // OpenID Capability application
        // ----------------------------------------
        Application openIdUiApp = new Application();
        openIdUiApp.setId(ida.getName().toLowerCase() + "-openid-ui");
        openIdUiApp.setApplicationName(ida.getName().toLowerCase() + "-openid-ui");
        openIdUiApp.setClazz("org.atricore.idbus.capabilities.openid.ui.internal.OpenIDUIApplication");
        openIdUiApp.setMountPoint(uiBasePath + "/" + ida.getName().toUpperCase() + "/OPENID");
        openIdUiApp.getContextParams().addAll(appParams);

        idauBeansUi.getImportsAndAliasAndBeen().add(openIdUiApp);


        // ----------------------------------------
        // Add all the beans to the list
        // ----------------------------------------
        IdProjectResource<Beans> rBeansUi =  new IdProjectResource<Beans>(idGen.generateId(), "beans-ui", "spring-beans", idauBeansUi);
        rBeansUi.setClassifier("jaxb");
        module.addResource(rBeansUi);

    }

}
