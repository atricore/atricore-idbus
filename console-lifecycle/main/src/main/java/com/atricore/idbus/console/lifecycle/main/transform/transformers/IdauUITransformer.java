package com.atricore.idbus.console.lifecycle.main.transform.transformers;

import com.atricore.idbus.console.lifecycle.main.domain.IdentityAppliance;
import com.atricore.idbus.console.lifecycle.main.domain.metadata.IdentityApplianceDefinition;
import com.atricore.idbus.console.lifecycle.main.domain.metadata.Location;
import com.atricore.idbus.console.lifecycle.main.domain.metadata.UserDashboardBranding;
import com.atricore.idbus.console.lifecycle.main.transform.*;
import com.atricore.idbus.console.lifecycle.support.springmetadata.model.*;
import com.atricore.idbus.console.lifecycle.support.springmetadata.model.osgi.Service;
import com.atricore.idbus.console.lifecycle.support.springmetadata.model.pax.wicket.Application;
import com.atricore.idbus.console.lifecycle.support.springmetadata.model.pax.wicket.ContextParam;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.atricore.idbus.capabilities.sso.ui.WebBranding;
import org.atricore.idbus.capabilities.sso.ui.WebAppConfig;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import static com.atricore.idbus.console.lifecycle.support.springmetadata.util.BeanUtils.*;
import static com.atricore.idbus.console.lifecycle.support.springmetadata.util.BeanUtils.setPropertyValue;

/**
 * @author <a href=mailto:sgonzalez@atricore.org>Sebastian Gonzalez Oyuela</a>
 */
public class IdauUITransformer extends AbstractTransformer {

    private static Log logger = LogFactory.getLog(IdauBaseComponentsTransformer.class);

    @Override
    public boolean accept(TransformEvent event) {
        return event.getData() instanceof IdentityApplianceDefinition;
    }

    @Override
    public void before(TransformEvent event) {

        IdentityApplianceDefinition ida = (IdentityApplianceDefinition) event.getData();
        IdentityAppliance appliance = event.getContext().getProject().getIdAppliance();
        IdApplianceTransformationContext context = event.getContext();
        IdProjectModule module = context.getCurrentModule();

        Date now = new Date();

        // ----------------------------------------

        // ----------------------------------------

        // ----------------------------------------
        // UI Beans
        // ----------------------------------------

        Beans idauBeansUi = newBeans(ida.getName() + " UI : IdAU Configuration generated by Atricore Console on " + now.toGMTString());
        String uiBasePath = "/IDBUS-UI";
        Location uiLocation = ida.getUiLocation();
        if (uiLocation != null) {
            uiBasePath = resolveLocationPath(uiLocation);
        }

        // ----------------------------------------
        // SSO Capability application
        // ----------------------------------------
        {

            String path = module.getPath();
            String pkg = module.getPackage();
            String clazz = "SSOUIApplication";
            String parentClazz = "org.atricore.idbus.capabilities.sso.ui.internal.SSOUIApplication";

            IdProjectSource s = new IdProjectSource(clazz, path, clazz, "java", "extends");
            s.setExtension("java");
            s.setClassifier("velocity");

            java.util.Map<String, Object> params = new HashMap<String, Object>();
            params.put("package", pkg);
            params.put("clazz", clazz);
            params.put("parentClazz", parentClazz);
            s.setParams(params);
            module.addSource(s);

            Application ssoUiApp = new Application();
            ssoUiApp.setId(normalizeBeanName(ida.getName() + "-sso-ui"));
            ssoUiApp.setApplicationName(ida.getName().toLowerCase() + "-sso-ui");
            ssoUiApp.setClazz(pkg + "." + clazz);
            ssoUiApp.setMountPoint(uiBasePath + "/" + ida.getName().toUpperCase() + "/SSO");
            ssoUiApp.setInjectionSource("spring");

            idauBeansUi.getImportsAndAliasAndBeen().add(ssoUiApp);

            // App Configuration
            Bean appCfgBean = newBean(idauBeansUi, ssoUiApp.getId() + "-cfg", WebAppConfig.class);
            setPropertyValue(appCfgBean, "appName", ssoUiApp.getId());
            if (ida.getUserDashboardBranding() != null)
                setPropertyValue(appCfgBean, "brandingId", ida.getUserDashboardBranding().getId());

            // Export App Configuration
            Service appCfgBeanOsgi = new Service();
            appCfgBeanOsgi.setId(appCfgBean.getName() + "-osgi");
            appCfgBeanOsgi.setRef(appCfgBean.getName());
            appCfgBeanOsgi.setInterface(WebAppConfig.class.getName());

            idauBeansUi.getImportsAndAliasAndBeen().add(appCfgBeanOsgi);


        }

        // ----------------------------------------
        // OpenID Capability application
        // ----------------------------------------
        {

            String path = module.getPath();
            String pkg = module.getPackage();
            String clazz = "OpenIDUIApplication";
            String parentClazz = "org.atricore.idbus.capabilities.openid.ui.internal.OpenIDUIApplication";

            IdProjectSource s = new IdProjectSource(clazz, path, clazz, "java", "extends");
            s.setExtension("java");
            s.setClassifier("velocity");

            java.util.Map<String, Object> params = new HashMap<String, Object>();
            params.put("package", pkg);
            params.put("clazz", clazz);
            params.put("parentClazz", parentClazz);
            s.setParams(params);
            module.addSource(s);

            Application openIdUiApp = new Application();
            openIdUiApp.setId(ida.getName().toLowerCase() + "-openid-ui");
            openIdUiApp.setApplicationName(ida.getName().toLowerCase() + "-openid-ui");
            openIdUiApp.setClazz(pkg + "." + clazz);
            openIdUiApp.setMountPoint(uiBasePath + "/" + ida.getName().toUpperCase() + "/OPENID");
            openIdUiApp.setInjectionSource("spring");

            idauBeansUi.getImportsAndAliasAndBeen().add(openIdUiApp);

            // App Configuration
            Bean appCfgBean = newBean(idauBeansUi, openIdUiApp.getId() + "-cfg", WebAppConfig.class);
            setPropertyValue(appCfgBean, "appName", openIdUiApp.getId());
            if (ida.getUserDashboardBranding() != null)
                setPropertyValue(appCfgBean, "brandingId", ida.getUserDashboardBranding().getId());

            // Export App Configuration
            Service appCfgBeanOsgi = new Service();
            appCfgBeanOsgi.setId(appCfgBean.getName() + "-osgi");
            appCfgBeanOsgi.setRef(appCfgBean.getName());
            appCfgBeanOsgi.setInterface(WebAppConfig.class.getName());

            idauBeansUi.getImportsAndAliasAndBeen().add(appCfgBeanOsgi);


        }

        // ----------------------------------------
        // Add all the beans to the list
        // ----------------------------------------
        IdProjectResource<Beans> rBeansUi =  new IdProjectResource<Beans>(idGen.generateId(), "beans-ui", "spring-beans", idauBeansUi);
        rBeansUi.setClassifier("jaxb");
        module.addResource(rBeansUi);

    }

}
