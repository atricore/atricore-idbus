/*
 * Atricore IDBus
 *
 *   Copyright 2009, Atricore Inc.
 *
 *   This is free software; you can redistribute it and/or modify it
 *   under the terms of the GNU Lesser General Public License as
 *   published by the Free Software Foundation; either version 2.1 of
 *   the License, or (at your option) any later version.
 *
 *   This software is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *   Lesser General Public License for more details.
 *
 *   You should have received a copy of the GNU Lesser General Public
 *   License along with this software; if not, write to the Free
 *   Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 *   02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */

/**
 * Generated by Gas3 v1.1.0 (Granite Data Services).
 *
 * NOTE: this file is only generated if it does not exist. You may safely put
 * your custom code here.
 */

package com.atricore.idbus.console.services.business {


import flash.events.Event;


import mx.rpc.AsyncToken;
import mx.rpc.AsyncToken;
import mx.rpc.AsyncToken;
import mx.rpc.remoting.RemoteObject;

import org.atricore.idbus.capabilities.management.main.spi.request.*;

public class IdentityBusMetadataManager implements IIdentityBusMetadataManager {

    //TODO remove! flex will access metadata management functionality through ajax services!

        private var ro:RemoteObject;

        private static var _instance:IdentityBusMetadataManager;


        public function IdentityBusMetadataManager() {
            if (_instance != null)
                 throw new Error("Singleton can only be accessed through Singleton.instance");
            this.ro = new RemoteObject("identityBusMetadataManager");
            _instance = this;            
        }

        public static function get instance():IdentityBusMetadataManager {
            if (_instance == null)  _instance = new IdentityBusMetadataManager();
                return _instance;
        }



    
        public function addEventListener(type:String, listener:Function, useCapture:Boolean=false, priority:int=0, useWeakReference:Boolean=false):void
        {
            ro.addEventListener(type, listener, useCapture, priority, useWeakReference);
        }

        public function removeEventListener(type:String, listener:Function, useCapture:Boolean=false):void
        {
            ro.removeEventListener(type, listener, useCapture);
        }

        public function dispatchEvent(event:Event):Boolean
        {
            return ro.dispatchEvent(event);
        }

        public function hasEventListener(type:String):Boolean
        {
            return ro.hasEventListener(type);
        }

        public function willTrigger(type:String):Boolean
        {
            return ro.willTrigger(type);
        }

}
}