<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Atricore Console
  ~
  ~ Copyright 2009-2010, Atricore Inc.
  ~
  ~ This is free software; you can redistribute it and/or modify it
  ~ under the terms of the GNU Lesser General Public License as
  ~ published by the Free Software Foundation; either version 2.1 of
  ~ the License, or (at your option) any later version.
  ~
  ~ This software is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  ~ Lesser General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public
  ~ License along with this software; if not, write to the Free
  ~ Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
  ~ 02110-1301 USA, or see the FSF site: http://www.fsf.org.
  -->

<WizardStep
        xmlns="com.atricore.idbus.console.components.wizard.*"
        xmlns:mx="library://ns.adobe.com/flex/mx"
        xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        stepName="JOSSO Service Provider"
        xmlns:utils="com.atricore.idbus.console.components.*"
        xmlns:components="com.atricore.idbus.console.components.*"
        creationComplete="initForm()"
        show="initResultArray()">

        <fx:Script>
        <![CDATA[
            import com.atricore.idbus.console.modeling.diagram.model.request.CheckInstallFolderRequest;
            import com.atricore.idbus.console.modeling.main.view.sso.event.SsoEvent;
            import com.atricore.idbus.console.services.dto.ExecEnvType;
            import com.atricore.idbus.console.services.dto.JOSSO1Resource;
            import com.atricore.idbus.console.services.dto.JOSSOActivation;
            import com.atricore.idbus.console.services.dto.JbossExecutionEnvironment;
            import com.atricore.idbus.console.services.dto.Location;
            import com.atricore.idbus.console.services.dto.ServiceConnection;
            import com.atricore.idbus.console.services.dto.InternalSaml2ServiceProvider;
            import com.atricore.idbus.console.services.dto.ServiceResource;
            import com.atricore.idbus.console.services.dto.TomcatExecutionEnvironment;

            [Bindable]
            private var validators:Array;

            [Bindable]
            private var labelWidth:Number = 165;

            private var lastSPCreated:Boolean;
            [Bindable]
            public var tmpPartnerAppLocationDomain:String;

            /**
             * This will holds the results
             */
            private var readableResultArray:Array;
            private var serviceProviderArray:Array;

            override public function get stepDecision():* {
                if (!lastSPCreated) {
                    addSPToArray();
                    lastSPCreated = true;
                }
                return serviceProviderArray;
            }

            override public function get readableStepDecision():String {
                addSPToReadableArray();
                return readableResultArray.join("\n").toString();
            }

            private function initResultArray():void {
                readableResultArray = new Array();
                serviceProviderArray = new Array();
                lastSPCreated = false;

                clearTheForm();
                focusManager.setFocus(jossoSPName);
            }

            private function initForm():void {
                if (validators == null) {
                    validators = new Array();
                    validators.push(nameValidator);
                    //                    validators.push(urlValidator);
                    validators.push(portValidator);
                    validators.push(domainValidator);
                    validators.push(contextPathValidator);
                    validators.push(partnerAppIdValidator);
                    validators.push(homeDirValidator);
                }
                parent.parent.addEventListener(SsoEvent.DIRECTORY_EXISTS, handleDirectoryExists);
                parent.parent.addEventListener(SsoEvent.DIRECTORY_DOESNT_EXIST, handleDirectoryDoesntExists);
                partnerappLocationPort.text = "8080";
                partnerappLocationDomain.text = tmpPartnerAppLocationDomain;
            }

            private function handleSpNameChange(event:Event):void {
                partnerAppId.text = jossoSPName.text;
                handleFormChange(event);
            }

            private function handleFormChange(event:Event):void {
                // Check the step validity
                homeDir.errorString = "";
                ssoWizStep3Form.validateForm(event);
                if (ssoWizStep3Form.isValid) {
                    var cif:CheckInstallFolderRequest = new CheckInstallFolderRequest();
                    cif.homeDir = homeDir.text;
                    cif.environmentName = "SSO_WIZARD_MADE_ENV";
                    var ssoEvent:SsoEvent = new SsoEvent(SsoEvent.VALIDATE_HOME_DIR);
                    ssoEvent.cif = cif;
                    parent.parent.dispatchEvent(ssoEvent);
                    //                    isValid = ssoWizStep3Form.isValid;
                }

            }

            public function callback_handleFormChange(validationRes:Boolean, errorString:String):void {
                homeDir.errorString = errorString;
                isValid = validationRes;
            }

            public function handleDirectoryExists(event:Event):void {
                homeDir.errorString = "";
                isValid = true;
            }

            public function handleDirectoryDoesntExists(event:Event):void {
                homeDir.errorString = resourceManager.getString(AtricoreConsole.BUNDLE, "executionenvironment.doesntexist");
                isValid = false;
            }

            private function addSPToArray():void {
                var sp:InternalSaml2ServiceProvider = new InternalSaml2ServiceProvider();
                sp.name = jossoSPName.text;

                // temporary location
                var spLoc:Location = new Location();
                spLoc.protocol = "";
                spLoc.host = "";
                spLoc.port = 80;
                spLoc.context = "";
                spLoc.uri = "";
                sp.location = spLoc;

                var resource:JOSSO1Resource = new JOSSO1Resource();
                resource.name = sp.name.replace(/\s+/g, "-") + "-josso1-resource";

                sp.serviceConnection = new ServiceConnection();
                sp.serviceConnection.name = resource.name.replace(/\s+/g, "-") + "-service-connection";
                sp.serviceConnection.sp = sp;
                sp.serviceConnection.resource = resource;
                resource.serviceConnection = sp.serviceConnection;

                resource.activation = new JOSSOActivation();
                resource.activation.name = sp.name + "-josso";
                var loc:Location = new Location();
                loc.protocol = partnerappLocationProtocol.labelDisplay.text;
                loc.host = partnerappLocationDomain.text;
                loc.port = parseInt(partnerappLocationPort.text);
                loc.context = partnerappLocationContext.text;
                loc.uri = "";

                resource.partnerAppLocation = loc;
                resource.partnerAppId = partnerAppId.text;

                if (jossoSPPlatform.selectedItem.@data.indexOf("jb") == 0) {
                    resource.activation.executionEnv = new JbossExecutionEnvironment();
                    (resource.activation.executionEnv as JbossExecutionEnvironment).instance = "default";
                } else if (jossoSPPlatform.selectedItem.@data.indexOf("tc") == 0) {
                    resource.activation.executionEnv = new TomcatExecutionEnvironment();
                }
                resource.activation.executionEnv.name = jossoSPPlatform.selectedItem.@data + "-execenv";
                resource.activation.executionEnv.type = ExecEnvType.LOCAL;
                resource.activation.executionEnv.installUri = homeDir.text;

                resource.activation.executionEnv.platformId = jossoSPPlatform.selectedItem.@data;

                resource.activation.resource = resource;

                serviceProviderArray.push(sp);
            }

            private function addSPToReadableArray():void {
                readableResultArray.push(resourceManager.getString(AtricoreConsole.BUNDLE, "idApplianceWiz.spLocalStep.josso.spname") + ": " + jossoSPName.text);
                readableResultArray.push(resourceManager.getString(AtricoreConsole.BUNDLE, "idApplianceWiz.spLocalStep.platform") + ": " + jossoSPPlatform.labelDisplay.text);
                readableResultArray.push(resourceManager.getString(AtricoreConsole.BUNDLE, "idApplianceWiz.spLocalStep.josso.sp.location") + ": " + composeLocation());
            }

            private function addNewSPProvider():void {
                addSPToArray();
                addSPToReadableArray();

                creationStatusLbl.text = resourceManager.getString(AtricoreConsole.BUNDLE, "idApplianceWiz.spLocalStep.creation.status");
                fadeFx.play([creationStatusLbl]);
                clearTheForm();

                isValid = false; //disable 'save' and 'next' buttons
            }

            private function clearTheForm():void {
                jossoSPName.text = "";
                jossoSPName.errorString = ""; //prevents validation error from occurring
                jossoSPPlatform.selectedIndex = 0;
                partnerAppId.text = "";
                partnerAppId.errorString = "";

                partnerappLocationDomain.errorString = "";//prevents validation error from occurring
                partnerappLocationDomain.text = tmpPartnerAppLocationDomain;
                partnerappLocationPort.text = "8080";
                partnerappLocationContext.text = "";
                partnerappLocationContext.errorString = "";

                homeDir.text = "";
                homeDir.errorString = "";


                partnerappLocationProtocol.selectedIndex = 0;
            }

            private function changeSPLocationLabel(event:Event):void {
                //                var port:String = ( partnerappLocationPort.text == "" ? "" : ":" + partnerappLocationPort.text );
                //                spLocationLbl.text = "[ " + composeLocation() + " ]";
                handleFormChange(event);
            }

            private function composeLocation():String {
                var port:String = ( partnerappLocationPort.text == "" ? "" : ":" + partnerappLocationPort.text );
                return partnerappLocationProtocol.labelDisplay.text + '://' + partnerappLocationDomain.text + port + '/' +
                        partnerappLocationContext.text;
            }
            ]]>
    </fx:Script>

    <fx:Declarations>
        <utils:NameValidator id="nameValidator" source="{jossoSPName}" required="true" property="text"/>
        <!--<mx:StringValidator id="domainValidator" source="{spLocationDomain}" required="true" property="text"/>-->
        <mx:NumberValidator id="portValidator" source="{partnerappLocationPort}" required="false" property="text"
            minValue="1" maxValue="65535"
            invalidCharError="{resourceManager.getString(AtricoreConsole.BUNDLE, 'ssoWiz.step3.portValidationError')}"/>
        <utils:URLPartValidator id="domainValidator" source="{partnerappLocationDomain}" required="true" property="text" />
        <!--<utils:URLPartValidator id="contextPathValidator" source="{partnerappLocationContext}" required="false" property="text" />-->
        <utils:URLMultipartValidator id="contextPathValidator" source="{partnerappLocationContext}" required="false" property="text" />
        <utils:NameValidator id="partnerAppIdValidator" source="{partnerAppId}" required="true" property="text"/>
        <mx:StringValidator id="homeDirValidator" source="{homeDir}" required="true" property="text"/>

        <fx:XML id="platforms" source="/com/atricore/idbus/console/modeling/view/platformList.xml" />
        <mx:XMLListCollection id="platformList" source="{platforms.children()}" />

        <s:Fade id="fadeFx" alphaFrom="1" alphaTo="0" duration="2000" startDelay="5000"/>
    </fx:Declarations>

    <s:VGroup width="100%" height="100%">

        <utils:ValidatingForm id="ssoWizStep3Form" width="100%" height="100%" validators="{validators}" labelWidth="{labelWidth}"
                    paddingLeft="10" paddingTop="10" paddingRight="10" paddingBottom="10">
            <utils:TitledBorderBox title="{resourceManager.getString(AtricoreConsole.BUNDLE, 'ssoWiz.step3.jossoServiceProvider')}"
                           width="100%" height="100%" cornerRadius="5" paddingLeft="10" paddingRight="5" paddingTop="20" paddingBottom="5">
                <s:HGroup>
                    <mx:Spacer width="{labelWidth}"/>
                    <s:Label id="creationStatusLbl" text="" >
                        <s:filters>
                            <s:BlurFilter blurX="0" blurY="0" />
                        </s:filters>
                    </s:Label>
                </s:HGroup>
                <mx:FormItem label="{resourceManager.getString(AtricoreConsole.BUNDLE, 'ssoWiz.step3.jossoSPName')}:"
                             required="true" paddingRight="4">
                    <s:TextInput id="jossoSPName" width="388" change="handleSpNameChange(event);"/>
                </mx:FormItem>
                <mx:FormItem label="{resourceManager.getString(AtricoreConsole.BUNDLE, 'ssoWiz.step3.applicationPlatform')}:">
                    <s:DropDownList id="jossoSPPlatform" width="302"
                            dataProvider="{platformList}" labelField="@label" selectedIndex="0"/>
                </mx:FormItem>

                <mx:FormItem label="{resourceManager.getString(AtricoreConsole.BUNDLE, 'ssoWiz.step3.partnerappid')}:"
                             required="true" paddingRight="4">
                    <s:TextInput id="partnerAppId" width="388" change="handleFormChange(event);"/>
                </mx:FormItem>

                <mx:FormItem label="{resourceManager.getString(AtricoreConsole.BUNDLE, 'ssoWiz.step3.applicationLocation')}:"
                        direction="horizontal" labelWidth="{labelWidth}" required="true">
                    <s:DropDownList id="partnerappLocationProtocol" change="{changeSPLocationLabel(event);}" width="70" selectedIndex="0">
                        <mx:ArrayCollection>
                            <fx:Object label="http" data="http"/>
                            <fx:Object label="https" data="https"/>
                        </mx:ArrayCollection>
                    </s:DropDownList>
                    <s:Label text="://" width="9" paddingLeft="-5" paddingTop="5"/>
                    <s:TextInput id="partnerappLocationDomain" width="130" change="changeSPLocationLabel(event);"/>
                    <s:Label text=":" width="1" paddingLeft="-5" paddingTop="5"/>
                    <s:TextInput id="partnerappLocationPort" width="40" change="changeSPLocationLabel(event);" />
                    <s:Label text="/" width="2" paddingLeft="-5" paddingTop="5"/>
                    <s:TextInput id="partnerappLocationContext" width="87" change="changeSPLocationLabel(event);" />
                </mx:FormItem>

                <mx:FormItem label="{resourceManager.getString(AtricoreConsole.BUNDLE, 'ssoWiz.step3.homeDir')}:"
                             required="true" paddingRight="4">
                    <s:TextInput id="homeDir" width="388" change="handleFormChange(event);"/>
                </mx:FormItem>


                <mx:Spacer height="10" />
                <s:HGroup>
                    <mx:Spacer width="{labelWidth + 8}"/>
                    <s:Button id="newSPProvider" label="{resourceManager.getString(AtricoreConsole.BUNDLE, 'ssoWiz.step3.addNewSPProvider')}"
                           click="addNewSPProvider()" enabled="{isValid}"/>
                </s:HGroup>
            </utils:TitledBorderBox>
       </utils:ValidatingForm>

    </s:VGroup>
</WizardStep>