<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Atricore Console
  ~
  ~ Copyright 2009-2010, Atricore Inc.
  ~
  ~ This is free software; you can redistribute it and/or modify it
  ~ under the terms of the GNU Lesser General Public License as
  ~ published by the Free Software Foundation; either version 2.1 of
  ~ the License, or (at your option) any later version.
  ~
  ~ This software is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  ~ Lesser General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public
  ~ License along with this software; if not, write to the Free
  ~ Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
  ~ 02110-1301 USA, or see the FSF site: http://www.fsf.org.
  -->

<WizardStep
        xmlns="com.atricore.idbus.console.components.wizard.*"
        xmlns:mx="library://ns.adobe.com/flex/mx"
        xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        stepName="Embedded User Repository"
        xmlns:utils="com.atricore.idbus.console.components.*"
        xmlns:components="com.atricore.idbus.console.components.*"
        creationComplete="initForm()"
        show="initFields()">

        <fx:Script>
        <![CDATA[

            import com.atricore.idbus.console.services.dto.DbIdentityVault;
            import com.atricore.idbus.console.services.dto.IdentityVault;

            [Bindable]
            private var validators:Array;

            private var readableDecisionArray:Array;

            override public function get stepDecision():* {
                var identityVault:IdentityVault = null;
                if (embeddedRepositoryType.selectedItem.label == "Database") {
                    identityVault = new DbIdentityVault();
                    identityVault.embedded = true;
                    identityVault.name = userRepositoryName.text;
                    (identityVault as DbIdentityVault).port = parseInt(serverPort.text);
                    //                    (identityVault as DbIdentityVault).connectionName
                    //                    (identityVault as DbIdentityVault).driverName
                    (identityVault as DbIdentityVault).schema = schema.text;
                    (identityVault as DbIdentityVault).admin = admin.text;
                    (identityVault as DbIdentityVault).password = adminPass.text;
                }
                return identityVault;
            }

            override public function get readableStepDecision():String {
                readableDecisionArray = new Array();
                //                readableDecisionArray.push("user repository name: " + userRepositoryName.text);
                readableDecisionArray.push("user repository type: " + embeddedRepositoryType.selectedItem.label);
                return readableDecisionArray.join("\n").toString();
            }

            private function initFields():void {
                userRepositoryName.text = (previousStepData as IdentityVault).name;
            }

            private function initForm():void {
                if (validators == null) {
                    validators = new Array();
                    validators.push(nameValidator);
                    validators.push(serverPortValidator);
                    validators.push(schemaValidator);
                    validators.push(adminValidator);
                    //                    validators.push(adminPassValidator);
                    //                    validators.push(confirmAdminPassValidator);
                    //                validators.push(matchPasswordsValidator);
                }
            }

            private function handleFormChange(event:Event):void {
                // Check the step validity
                ssoWizStep2Form.validateForm(event);
                isValid = ssoWizStep2Form.isValid && comparePasswords(event);
            }

            /**
             * Used instead of matchValidator because changing the confirmField doesn't remove the error message
             * from password field (although the next button becomes enabled)
             * @return
             */
            private function comparePasswords(event:Event):Boolean {
                if (adminPass.text == "" && adminPass == event.target) {
                    adminPass.errorString = resourceManager.getString(AtricoreConsole.BUNDLE, 'ssoWiz.step2.requiredField');
                    return false;
                }
                if (confirmAdminPass.text == "" && confirmAdminPass == event.target) {
                    confirmAdminPass.errorString = resourceManager.getString(AtricoreConsole.BUNDLE, 'ssoWiz.step2.requiredField');
                    return false;
                }
                if (adminPass.text != confirmAdminPass.text && (adminPass == event.target || confirmAdminPass == event.target)) {
                    adminPass.errorString = resourceManager.getString(AtricoreConsole.BUNDLE, 'ssoWiz.step2.passwords.mismatch');
                    return false;
                }
                confirmAdminPass.errorString = "";
                adminPass.errorString = "";
                return true;
            }

        ]]>
    </fx:Script>

    <fx:Declarations>
        <mx:StringValidator id="nameValidator" source="{userRepositoryName}" required="true" property="text"/>
        <mx:NumberValidator id="serverPortValidator" source="{serverPort}" minValue="0" maxValue="65535" required="true" property="text"/>
        <mx:StringValidator id="schemaValidator" source="{schema}" required="true" property="text"/>
        <mx:StringValidator id="adminValidator" source="{admin}" required="true" property="text"/>
    </fx:Declarations>
    <!--<mx:StringValidator id="adminPassValidator" source="{adminPass}" required="true" property="text"/>-->
    <!--<mx:StringValidator id="confirmAdminPassValidator" source="{confirmAdminPass}" required="true" property="text"/>-->

    <!--<utils:MatchValidator  id="matchPasswordsValidator" source="{adminPass}" property="text" matchSource="{confirmAdminPass}" matchProperty="text"-->
        <!--noMatchError="Passwords do not match"/>-->

    <s:VGroup width="100%" height="100%">

        <utils:ValidatingForm id="ssoWizStep2Form" width="100%" height="100%" validators="{validators}" labelWidth="110"
                    paddingLeft="10" paddingTop="10" paddingRight="10" paddingBottom="10">
            <utils:TitledBorderBox title="{resourceManager.getString(AtricoreConsole.BUNDLE, 'ssoWiz.step2.embeddedUsersRepository')}"
                           width="100%" height="100%" cornerRadius="5" paddingLeft="10" paddingRight="5" paddingTop="20" paddingBottom="5">
                <s:HGroup>
                    <mx:FormItem labelWidth="50" label="{resourceManager.getString(AtricoreConsole.BUNDLE, 'ssoWiz.step2.userRepositoryName')}:" required="true">
                        <s:TextInput id="userRepositoryName" width="150" editable="false"
                                text="{(previousStepData as IdentityVault).name}"/>
                    </mx:FormItem>
                    <mx:FormItem labelWidth="40" label="{resourceManager.getString(AtricoreConsole.BUNDLE, 'ssoWiz.step2.embeddedRepositoryType')}:">
                        <s:DropDownList id="embeddedRepositoryType" width="100" change="handleFormChange(event);" selectedIndex="0">
                            <mx:ArrayCollection>
                                 <fx:Object label="Database" data="database"/>
                             </mx:ArrayCollection>
                        </s:DropDownList>
                    </mx:FormItem>
                    <s:CheckBox id="skipConnTest" label="{resourceManager.getString(AtricoreConsole.BUNDLE, 'ssoWiz.step2.skipConnTest')}"/>
                </s:HGroup>

                <mx:TabNavigator borderStyle="solid" width="100%" height="100%">

                    <!-- DATABASE DEFINITION TAB -->
                    <s:NavigatorContent label="{resourceManager.getString(AtricoreConsole.BUNDLE, 'ssoWiz.step2.dbDefinitionTab')}">
                        <s:VGroup>
                            <s:HGroup>
                                <mx:FormItem label="{resourceManager.getString(AtricoreConsole.BUNDLE, 'ssoWiz.step2.serverPort')}:" required="true">
                                    <s:TextInput id="serverPort" width="80" change="handleFormChange(event);"/>
                                </mx:FormItem>
                                <mx:Spacer width="50"/>
                                <s:CheckBox id="bindToAllInterfaces" label="{resourceManager.getString(AtricoreConsole.BUNDLE, 'ssoWiz.step2.bindToAllInterfaces')}"/>
                            </s:HGroup>
                            <mx:FormItem label="{resourceManager.getString(AtricoreConsole.BUNDLE, 'ssoWiz.step2.schema')}:" required="true">
                                <s:TextInput id="schema" width="200" change="handleFormChange(event);"/>
                            </mx:FormItem>

                            <mx:FormItem label="{resourceManager.getString(AtricoreConsole.BUNDLE, 'ssoWiz.step2.admin')}:" required="true">
                                <s:TextInput id="admin" width="200" change="handleFormChange(event);"/>
                            </mx:FormItem>

                            <mx:FormItem label="{resourceManager.getString(AtricoreConsole.BUNDLE, 'ssoWiz.step2.adminPass')}:" required="true">
                                <s:TextInput id="adminPass" width="200"
                                    change="handleFormChange(event);" displayAsPassword="true"/>
                            </mx:FormItem>

                            <mx:FormItem label="{resourceManager.getString(AtricoreConsole.BUNDLE, 'ssoWiz.step2.confirmAdminPass')}:" required="true">
                                <s:TextInput id="confirmAdminPass" width="200" change="handleFormChange(event);"
                                    displayAsPassword="true"/>
                            </mx:FormItem>

                            <s:HGroup width="100%">
                                <mx:Spacer width="390"/>
                                <s:Button id="testConnBtn" label="{resourceManager.getString(AtricoreConsole.BUNDLE, 'ssoWiz.step2.testConnection')}"/>
                            </s:HGroup>
                            <mx:Spacer width="10"/>
                        </s:VGroup>
                    </s:NavigatorContent>

                </mx:TabNavigator>
            </utils:TitledBorderBox>
       </utils:ValidatingForm>

    </s:VGroup>
</WizardStep>