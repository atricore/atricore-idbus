<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Atricore Console
  ~
  ~ Copyright 2009-2010, Atricore Inc.
  ~
  ~ This is free software; you can redistribute it and/or modify it
  ~ under the terms of the GNU Lesser General Public License as
  ~ published by the Free Software Foundation; either version 2.1 of
  ~ the License, or (at your option) any later version.
  ~
  ~ This software is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  ~ Lesser General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public
  ~ License along with this software; if not, write to the Free
  ~ Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
  ~ 02110-1301 USA, or see the FSF site: http://www.fsf.org.
  -->

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" horizontalAlign="center">

	<mx:Label
		toolTip="Use this control to height of birdeye view."
		text="{resourceManager.getString(AtricoreConsole.BUNDLE, 'graph.control.zoom')}"
		textAlign="center"
        fontWeight="bold"
		/>

	<mx:VBox width="95%">

        <mx:Button
            id="plusZoom"
            icon="{EmbeddedIcons.zoominIcon}"
            cornerRadius="5"
            width="25"
            height="25"
            click="bzoom.value=bzoom.value+.10;updateVScale(null);"/>
        
		<mx:VSlider
			tickInterval=".25"
			width="95%"
			id="bzoom"
			value="1"
			minimum=".25"
			maximum="2"
			liveDragging="true"
            labels="['25%','200%']"
            labelOffset="12"
            showTrackHighlight="true"
            tickOffset="10"
			change="updateVScale(null)"/>

        <mx:Button
            id="minusZoom"
            icon="{EmbeddedIcons.zoomoutIcon}"
            cornerRadius="5"
            width="25"
            height="25"
            click="bzoom.value=bzoom.value-.10;updateVScale(null);"/>

	</mx:VBox>

	<mx:Script>
		<![CDATA[
        import com.atricore.idbus.console.main.view.util.EmbeddedIcons;

        import org.un.cava.birdeye.ravis.graphLayout.visual.VisualGraph;
        import org.un.cava.birdeye.ravis.utils.LogUtil;
        import org.un.cava.birdeye.ravis.utils.events.VGraphEvent;

        private static const _LOG:String = "components.ui.controls.vgraphControls.BirdEyeZoom";

        private var _vgraph:VisualGraph;

        /**
         * Provides access to the registered vgraph object.
         * */
        public function set vgraph(v:VisualGraph):void {
            _vgraph = v;
            registerListeners();
        }


        /**
         * @private
         * */
        public function get vgraph():VisualGraph {
            return _vgraph;
        }

        /**
         * update the scale of the VGraph, thus creating a BirdEye zoom effect
         * this function can be passed a MouseEvent to handle scrollwheel zooming
         * @param event A MouseEvent.MOUSE_WHEEL
         * */
        public function updateVScale(event:MouseEvent):void {

            if (bzoom == null) {
                return;
            }

            if (_vgraph == null) {
                LogUtil.warn(_LOG, "BirdEyeZoom NOT changed, no valid vgraph!");
                return;
            }
            //_vgraph.scale = bzoom.value;

            // Handle the update for mousewheel events outside the component
            if (event != null) {
                if (event.delta != 0) {
                    if (bzoom.value == bzoom.minimum) {
                        if (event.delta > 0) {
                            bzoom.value = bzoom.value + (event.delta * 0.01);
                            _vgraph.scale = bzoom.value;
                        }
                    }
                    else if (bzoom.value == bzoom.maximum) {
                        if (event.delta < 0) {
                            bzoom.value = bzoom.value + (event.delta * 0.01);
                            _vgraph.scale = bzoom.value;
                        }
                    } else {
                        bzoom.value = bzoom.value + (event.delta * 0.01);
                        _vgraph.scale = bzoom.value;
                    }
                }
            }
            // Handle the update for the zoom buttons
            else {
                if (bzoom.value <= bzoom.minimum) {
                    bzoom.value = bzoom.minimum;
                    return;
                } else {
                    _vgraph.scale = bzoom.value;
                }

                if (bzoom.value >= bzoom.maximum) {
                    bzoom.value = bzoom.maximum;
                    return;
                } else {
                    _vgraph.scale = bzoom.value;
                }
            }
        }

        /* refresh the slider from the scaleX value */
        public function refreshVScale(e:VGraphEvent = null):void {
            if (bzoom == null) {
                return;
            }
            if (_vgraph == null) {
                LogUtil.warn(_LOG, "BirdEyeZoom NOT refreshed, no valid vgraph!");
                return;
            }
            bzoom.value = _vgraph.scale;
        }

        /**
         * register listeners
         * */
        private function registerListeners():void {
            _vgraph.addEventListener(VGraphEvent.VGRAPH_CHANGED, refreshVScale);
            /* testing*/
            this.addEventListener(MouseEvent.MOUSE_WHEEL, updateVScale);
        }
		]]>
	</mx:Script>
</mx:VBox>
