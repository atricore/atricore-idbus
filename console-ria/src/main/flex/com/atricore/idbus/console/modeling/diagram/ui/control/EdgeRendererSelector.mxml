<?xml version="1.0" ?>
<!--
  ~ Atricore Console
  ~
  ~ Copyright 2009-2010, Atricore Inc.
  ~
  ~ This is free software; you can redistribute it and/or modify it
  ~ under the terms of the GNU Lesser General Public License as
  ~ published by the Free Software Foundation; either version 2.1 of
  ~ the License, or (at your option) any later version.
  ~
  ~ This software is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  ~ Lesser General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public
  ~ License along with this software; if not, write to the Free
  ~ Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
  ~ 02110-1301 USA, or see the FSF site: http://www.fsf.org.
  -->

mx:ComboBox xmlns:mx="http://www.adobe.com/2006/mxml"
	width="100%"
	prompt="Select edge style."
	toolTip="Select the style of line drawn between nodes."
	initialize="initData()"
	change="changeEdgeRenderer()" >

	<mx:ArrayCollection id="ervalues">
		<mx:String>{resourceManager.getString(AtricoreConsole.BUNDLE, 'graph.control.edge.render.simple')}</mx:String>
		<mx:String>{resourceManager.getString(AtricoreConsole.BUNDLE, 'graph.control.edge.render.directArrow')}</mx:String>
		<mx:String>{resourceManager.getString(AtricoreConsole.BUNDLE, 'graph.control.edge.render.orthogonal')}</mx:String>
		<mx:String>{resourceManager.getString(AtricoreConsole.BUNDLE, 'graph.control.edge.render.circular')}</mx:String>
	</mx:ArrayCollection>

	<mx:Script>
		<![CDATA[
        import mx.utils.ObjectUtil;

        import org.un.cava.birdeye.ravis.graphLayout.visual.VisualGraph;
        import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.BaseEdgeRenderer;
        import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.CircularEdgeRenderer;
        import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.DirectedArrowEdgeRenderer;
        import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.OrthogonalEdgeRenderer;
        import org.un.cava.birdeye.ravis.utils.LogUtil;
        import org.un.cava.birdeye.ravis.utils.events.VGraphEvent;

        private static const _LOG:String = "components.ui.controls.vgraphControls.EdgeRendererSelector";
        private var _vgraph:VisualGraph;

        /**
         * Provides access to the registered vgraph object.
         * */
        public function set vgraph(v:VisualGraph):void {
            _vgraph = v;
            registerListeners();
        }


        /**
         * @private
         * */
        public function get vgraph():VisualGraph {
            return _vgraph;
        }

        /**
         * When enabling or disabling this component, we also
         * perform some specific tasks.
         * Attention do completely disable interaction
         * there is also the mouseEnabled property.
         *
         * @inheritDoc
         * */
        override public function set enabled(e:Boolean):void {
            if (e) {
                /*this.setStyle("color",0x000000);*/
                this.alpha = 1;
            } else {
                /*this.setStyle("color",0xCCCCCC);*/
                this.alpha = 0.3;
            }
            /* call superclass (ComboBox) */
            super.enabled = e;
        }

        /**
         * Set the selected EdgeLabelRenderer.
         * */
        public function changeEdgeRenderer():void {

            var er:String;
            var g:Graphics;

            if (_vgraph == null) {
                LogUtil.warn(_LOG, "Cannot change EdgeRenderer, no valid vgraph!");
                return;
            }
            g = _vgraph.edgeDrawGraphics;

            /* get the currently selected EdgeRenderer */
            er = this.selectedItem as String;

            switch (er) {
                case resourceManager.getString(AtricoreConsole.BUNDLE, 'graph.control.edge.render.simple'):
                    _vgraph.edgeRenderer = new BaseEdgeRenderer(g);
                    break;
                case resourceManager.getString(AtricoreConsole.BUNDLE, 'graph.control.edge.render.directArrow'):
                    _vgraph.edgeRenderer = new DirectedArrowEdgeRenderer(g);
                    break;
                case resourceManager.getString(AtricoreConsole.BUNDLE, 'graph.control.edge.render.orthogonal'):
                    _vgraph.edgeRenderer = new OrthogonalEdgeRenderer(g);
                    break;
                case resourceManager.getString(AtricoreConsole.BUNDLE, 'graph.control.edge.render.circular'):
                    _vgraph.edgeRenderer = new CircularEdgeRenderer(g);
                    break;
                default:
                    LogUtil.warn(_LOG, "Illegal EdgeRenderer selected:" + er);
                    _vgraph.edgeRenderer = new BaseEdgeRenderer(g);
                    break;
            }
            _vgraph.refresh();
        }

        /**
         * Refresh the selector with the current EdgeLabelRenderer.
         * */
        public function refreshSelector(e:VGraphEvent = null):void {

            var erClassName:String;

            if (_vgraph == null) {
                LogUtil.warn(_LOG, "Cannot refresh EdgeRenderer, no valid vgraph!");
                return;
            }

            erClassName = ObjectUtil.getClassInfo(_vgraph.edgeRenderer).name;
            erClassName = erClassName.replace(/org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers::/, "");

            switch (erClassName) {
                case "BaseEdgeRenderer":
                    this.selectedIndex = 0;
                    break;
                case "DirectedArrowEdgeRenderer":
                    this.selectedIndex = 1;
                    break;
                case "OrthogonalEdgeRenderer":
                    this.selectedIndex = 2;
                    break;
                case "CircularEdgeRenderer":
                    this.selectedIndex = 3;
                    break;
                default:
                    LogUtil.warn(_LOG, "Illegal EdgeRenderer class received:" + erClassName);
                    break;
            }
        }

        /**
         * initialise the selection data.
         * It is a bit unclear, why this seems to be necessary.
         * */
        private function initData():void {
            this.dataProvider = ervalues;
        }

        /**
         * register event listener
         * */
        private function registerListeners():void {
            _vgraph.addEventListener(VGraphEvent.VGRAPH_CHANGED, refreshSelector);
        }
		]]>
	</mx:Script>
</mx:ComboBox>
