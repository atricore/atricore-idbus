<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Atricore Console
  ~
  ~ Copyright 2009-2010, Atricore Inc.
  ~
  ~ This is free software; you can redistribute it and/or modify it
  ~ under the terms of the GNU Lesser General Public License as
  ~ published by the Free Software Foundation; either version 2.1 of
  ~ the License, or (at your option) any later version.
  ~
  ~ This software is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  ~ Lesser General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public
  ~ License along with this software; if not, write to the Free
  ~ Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
  ~ 02110-1301 USA, or see the FSF site: http://www.fsf.org.
  -->

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:primitive="org.un.cava.birdeye.ravis.assets.icons.primitives.*"
	creationComplete="onCreationComplete()" autoLayout="true" rollOver="handleNodeRollOver(event)" rollOut="handleNodeRollOut(event)">

    <mx:Zoom id="zoomAll" zoomWidthTo="1.2" zoomHeightTo="1.2" zoomWidthFrom="1" zoomHeightFrom="1"/>

    <mx:Button label="{_linkLabel}" icon="{_linkIcon}" click="nodeSelected(event)" toggle="true"/>

    <mx:Button id="removeNode" icon="{EmbeddedIcons.removeNodeIcon}" click="confirmNodeRemove(event)" visible="false"/>

	<mx:Script>
		<![CDATA[

        import com.atricore.idbus.console.main.EmbeddedIcons;

        import com.atricore.idbus.console.modeling.diagram.event.VNodeRemoveEvent;
        import com.atricore.idbus.console.modeling.diagram.event.VNodeSelectedEvent;
        import com.atricore.idbus.console.modeling.diagram.model.GraphDataManager;

        import com.atricore.idbus.console.services.dto.BindingProviderDTO;
        import com.atricore.idbus.console.services.dto.ChannelDTO;
        import com.atricore.idbus.console.services.dto.IdentityApplianceDTO;

        import com.atricore.idbus.console.services.dto.IdentityApplianceUnitDTO;
        import com.atricore.idbus.console.services.dto.IdentityApplianceUnitTypeDTO;
        import com.atricore.idbus.console.services.dto.IdentityProviderDTO;

        import com.atricore.idbus.console.services.dto.IdentityVaultDTO;
        import com.atricore.idbus.console.services.dto.ServiceProviderDTO;

        import mx.controls.Alert;

        import mx.events.CloseEvent;

        import org.un.cava.birdeye.ravis.graphLayout.visual.IVisualGraph;
        import org.un.cava.birdeye.ravis.graphLayout.visual.IVisualNode;
        import org.un.cava.birdeye.ravis.graphLayout.visual.VisualGraph;
        import org.un.cava.birdeye.ravis.utils.events.VGraphEvent;

        private var _vgraph:IVisualGraph;

        [Bindable]
        public var _linkLabel:String;

        [Bindable]
        public var _linkIcon:Class;

        private var _graphManager:GraphDataManager;


        private function onCreationComplete():void {
            registerListeners();
            loadData(IVisualNode(this.data).data);
        }

        public override function set data(value:Object):void {
            super.data = value;
            _vgraph = (IVisualNode(this.data).vgraph);
        }

        protected function loadData(obj:Object):void {
            if (obj is IdentityApplianceDTO) {
                var bus:IdentityApplianceDTO = obj as IdentityApplianceDTO;
                _linkLabel = bus.idApplianceDefinition.name;
                //iconImage.source = EmbeddedIcons.busIcon;
                _linkIcon = EmbeddedIcons.busIcon;
            } else {
                if (obj is IdentityProviderDTO) {
                    var idp:IdentityProviderDTO = obj as IdentityProviderDTO;
                    _linkLabel = idp.name;
                    //iconImage.source = EmbeddedIcons.idpIcon;
                    _linkIcon = EmbeddedIcons.idpIcon;
                } else {
                    if (obj is ServiceProviderDTO) {
                        var sp:ServiceProviderDTO = obj as ServiceProviderDTO;
                        _linkLabel = sp.name;
                        //iconImage.source = EmbeddedIcons.spIcon;
                    } else {
                        if (obj is BindingProviderDTO) {
                            var bp:BindingProviderDTO = obj as BindingProviderDTO;
                            _linkLabel = bp.name;
                            //iconImage.source = EmbeddedIcons.bpIcon;
                        } else {
                            if(obj is ChannelDTO){
                                _linkLabel = (obj as ChannelDTO).name;
                            } else {

                                if (obj is IdentityVaultDTO) {
                                    var identityVault:IdentityVaultDTO = obj as IdentityVaultDTO;
                                    _linkLabel = identityVault.name;
                                    //iconImage.source = EmbeddedIcons.vaultIcon;
                                } else {
                                    if (obj is IdentityApplianceUnitDTO) {
                                        var applianceUnit:IdentityApplianceUnitDTO = obj as IdentityApplianceUnitDTO;
                                        _linkLabel = applianceUnit.name;
                                        var type:IdentityApplianceUnitTypeDTO = applianceUnit.type;
                                        if (type.equals(IdentityApplianceUnitTypeDTO.FEDERATION_UNIT)) {
                                            //iconImage.source = EmbeddedIcons.spIcon;
                                        } else if (type.equals(IdentityApplianceUnitTypeDTO.PROVISIONING_UNIT)) {
                                            //iconImage.source = EmbeddedIcons.vaultIcon;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        private function nodeSelected(e:MouseEvent):void {
            dispatchEvent(new VNodeSelectedEvent(VNodeSelectedEvent.VNODE_SELECTED, IVisualNode(this.data).node.stringid, true, false, 0));
        }

        private function confirmNodeRemove(e:MouseEvent):void {
            Alert.show("Are you sure you want to delete this item?", "Confirm Removal", Alert.YES | Alert.NO, null, nodeRemoveConfirmed, null, Alert.YES);
        }

        private function nodeRemoveConfirmed(event:CloseEvent):void {
            if (event.detail == Alert.YES) {
                dispatchEvent(new VNodeRemoveEvent(VNodeRemoveEvent.VNODE_REMOVE, IVisualNode(this.data).node.stringid, true, false, 0));
            }
        }


        public function handleNodeRollOver(event:MouseEvent):void {
            (_vgraph as VisualGraph).data = IVisualNode(this.data);

            if (zoomAll.isPlaying) {
                zoomAll.reverse();
            }
            else {
                zoomAll.play([event.target], false);
            }

            // show node remove button
            removeNode.visible = true;
        }

        public function handleNodeRollOut(event:MouseEvent):void {
            (_vgraph as VisualGraph).data = null;

            // hide node remove button
            removeNode.visible = false;

            if (zoomAll.isPlaying) {
                zoomAll.reverse();
            }
            else {
                zoomAll.play([event.target], true);
            }

        }

        public function refreshData(e:VGraphEvent = null):void {
            loadData(IVisualNode(this.data).data);
        }

        /**
         * register the event listener
         * */
        private function registerListeners():void {
            IVisualNode(this.data).vgraph.addEventListener(VGraphEvent.VGRAPH_CHANGED, refreshData);
        }

		]]>
	</mx:Script>
</mx:VBox>
