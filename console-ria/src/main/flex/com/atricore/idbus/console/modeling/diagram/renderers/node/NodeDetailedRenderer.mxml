<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Atricore Console
  ~
  ~ Copyright 2009-2010, Atricore Inc.
  ~
  ~ This is free software; you can redistribute it and/or modify it
  ~ under the terms of the GNU Lesser General Public License as
  ~ published by the Free Software Foundation; either version 2.1 of
  ~ the License, or (at your option) any later version.
  ~
  ~ This software is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  ~ Lesser General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public
  ~ License along with this software; if not, write to the Free
  ~ Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
  ~ 02110-1301 USA, or see the FSF site: http://www.fsf.org.
  -->

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:primitive="org.un.cava.birdeye.ravis.assets.icons.primitives.*"
	creationComplete="onCreationComplete()" autoLayout="true" rollOver="handleNodeRollOver(event)" rollOut="handleNodeRollOut(event)"
    verticalGap="0" horizontalAlign="center">

    <mx:Zoom id="zoomAll" zoomWidthTo="1.2" zoomHeightTo="1.2" zoomWidthFrom="1" zoomHeightFrom="1"/>

    <mx:Button id="nodeBtn" label="{_linkLabel}" icon="{_linkIcon}" click="nodeSelected(event)" toggle="true"/>

    <mx:Button id="removeNode" icon="{EmbeddedIcons.removeNodeIcon}" click="confirmNodeRemove(event)" visible="false"/>

	<mx:Script>
		<![CDATA[
        import com.atricore.idbus.console.main.EmbeddedIcons;
        import com.atricore.idbus.console.modeling.diagram.event.VNodeRemoveEvent;
        import com.atricore.idbus.console.modeling.diagram.event.VNodeSelectedEvent;
        import com.atricore.idbus.console.modeling.diagram.model.GraphDataManager;
        import com.atricore.idbus.console.services.dto.AlfrescoResource;
        import com.atricore.idbus.console.services.dto.ApacheExecutionEnvironment;
        import com.atricore.idbus.console.services.dto.BlackBoardResource;
        import com.atricore.idbus.console.services.dto.CaptiveExecutionEnvironment;
        import com.atricore.idbus.console.services.dto.Channel;
        import com.atricore.idbus.console.services.dto.ColdfusionResource;
        import com.atricore.idbus.console.services.dto.DbIdentitySource;
        import com.atricore.idbus.console.services.dto.DirectoryAuthenticationService;
        import com.atricore.idbus.console.services.dto.DominoResource;
        import com.atricore.idbus.console.services.dto.ExecutionEnvironment;
        import com.atricore.idbus.console.services.dto.ExternalOpenIDIdentityProvider;
        import com.atricore.idbus.console.services.dto.ExternalSaml2IdentityProvider;
        import com.atricore.idbus.console.services.dto.ExternalSaml2ServiceProvider;
        import com.atricore.idbus.console.services.dto.ExternalWSFederationServiceProvider;
        import com.atricore.idbus.console.services.dto.GoogleAppsServiceProvider;
        import com.atricore.idbus.console.services.dto.IdentityAppliance;
        import com.atricore.idbus.console.services.dto.IdentityApplianceUnit;
        import com.atricore.idbus.console.services.dto.IdentityApplianceUnitType;
        import com.atricore.idbus.console.services.dto.IdentityProvider;
        import com.atricore.idbus.console.services.dto.IdentitySource;
        import com.atricore.idbus.console.services.dto.InternalSaml2ServiceProvider;
        import com.atricore.idbus.console.services.dto.JBossEPPAuthenticationService;
        import com.atricore.idbus.console.services.dto.JBossEPPResource;
        import com.atricore.idbus.console.services.dto.JBossPortalResource;
        import com.atricore.idbus.console.services.dto.JEEExecutionEnvironment;
        import com.atricore.idbus.console.services.dto.JOSSO1Resource;
        import com.atricore.idbus.console.services.dto.JOSSO2Resource;
        import com.atricore.idbus.console.services.dto.JbossExecutionEnvironment;
        import com.atricore.idbus.console.services.dto.LdapIdentitySource;
        import com.atricore.idbus.console.services.dto.LiferayResource;
        import com.atricore.idbus.console.services.dto.MicroStrategyResource;
        import com.atricore.idbus.console.services.dto.OAuth2ServiceProvider;
        import com.atricore.idbus.console.services.dto.ExternalOpenIDIdentityProvider;
        import com.atricore.idbus.console.services.dto.PHPExecutionEnvironment;
        import com.atricore.idbus.console.services.dto.PhpBBResource;
        import com.atricore.idbus.console.services.dto.SalesforceServiceProvider;
        import com.atricore.idbus.console.services.dto.ExternalSaml2ServiceProvider;
        import com.atricore.idbus.console.services.dto.SasResource;
        import com.atricore.idbus.console.services.dto.SelfServicesResource;
        import com.atricore.idbus.console.services.dto.ServiceResource;
        import com.atricore.idbus.console.services.dto.SharepointResource;
        import com.atricore.idbus.console.services.dto.SugarCRMServiceProvider;
        import com.atricore.idbus.console.services.dto.TomcatExecutionEnvironment;
        import com.atricore.idbus.console.services.dto.WASCEExecutionEnvironment;
        import com.atricore.idbus.console.services.dto.WeblogicExecutionEnvironment;
        import com.atricore.idbus.console.services.dto.WebserverExecutionEnvironment;
        import com.atricore.idbus.console.services.dto.WikidAuthenticationService;
        import com.atricore.idbus.console.services.dto.DominoAuthenticationService;
        import com.atricore.idbus.console.services.dto.ClientCertAuthnService;
        import com.atricore.idbus.console.services.dto.WindowsIISExecutionEnvironment;
        import com.atricore.idbus.console.services.dto.WindowsIntegratedAuthentication;
        import com.atricore.idbus.console.services.dto.XmlIdentitySource;

        import mx.controls.Alert;
        import mx.events.CloseEvent;

        import org.un.cava.birdeye.ravis.graphLayout.visual.IVisualGraph;
        import org.un.cava.birdeye.ravis.graphLayout.visual.IVisualNode;
        import org.un.cava.birdeye.ravis.graphLayout.visual.VisualGraph;
        import org.un.cava.birdeye.ravis.utils.events.VGraphEvent;

        private var _vgraph:IVisualGraph;

        [Bindable]
        public var _linkLabel:String;

        [Bindable]
        public var _linkIcon:Class;

        private var _graphManager:GraphDataManager;


        private function onCreationComplete():void {
            registerListeners();
            loadData(IVisualNode(this.data).data);
        }

        public override function set data(value:Object):void {
            super.data = value;
            _vgraph = (IVisualNode(this.data).vgraph);
        }

        protected function loadData(obj:Object):void {
            if (obj is IdentityAppliance) {
                var bus:IdentityAppliance = obj as IdentityAppliance;
                _linkLabel = bus.idApplianceDefinition.name;
                _linkIcon = EmbeddedIcons.identityApplianceIcon;
            } else if (obj is IdentityProvider) {
                var idp:IdentityProvider = obj as IdentityProvider;
                _linkLabel = idp.name;
                _linkIcon = EmbeddedIcons.idpIcon;
            } else if (obj is InternalSaml2ServiceProvider) {
                var s2sp:InternalSaml2ServiceProvider = obj as InternalSaml2ServiceProvider;
                _linkLabel = s2sp.name;
                _linkIcon = EmbeddedIcons.internalSaml2SpIcon;
            } else if (obj is ExternalSaml2IdentityProvider) {
                var xs2idp:ExternalSaml2IdentityProvider = obj as ExternalSaml2IdentityProvider;
                _linkLabel = xs2idp.name;
                _linkIcon = EmbeddedIcons.externalSaml2IdpIcon;
            } else if (obj is ExternalSaml2ServiceProvider) {
                var xs2sp:ExternalSaml2ServiceProvider = obj as ExternalSaml2ServiceProvider;
                _linkLabel = xs2sp.name;

                if (obj is SalesforceServiceProvider) {
                    _linkIcon = EmbeddedIcons.salesforceSpIcon;
                } else
                if (obj is GoogleAppsServiceProvider) {
                    _linkIcon = EmbeddedIcons.googleSpIcon;
                } else
                if (obj is SugarCRMServiceProvider) {
                    _linkIcon = EmbeddedIcons.sugarCRMSpIcon;
                } else {
                    _linkIcon = EmbeddedIcons.externalSaml2SpIcon;
                }
            } else if (obj is ExternalOpenIDIdentityProvider) {
                var openididp:ExternalOpenIDIdentityProvider = obj as ExternalOpenIDIdentityProvider;
                _linkLabel = openididp.name;
                _linkIcon = EmbeddedIcons.externalOpenidIdpIcon;
            } else if (obj is ExternalOpenIDIdentityProvider) {
                var oididp:ExternalOpenIDIdentityProvider = obj as ExternalOpenIDIdentityProvider;
                _linkLabel = oididp.name;
                _linkIcon = EmbeddedIcons.externalOpenidIdpIcon;
            } else if (obj is OAuth2ServiceProvider) {
                var oa2sp:OAuth2ServiceProvider = obj as OAuth2ServiceProvider;
                _linkLabel = oa2sp.name;
                _linkIcon = EmbeddedIcons.oauth2SpIcon;
            } else if (obj is ExternalWSFederationServiceProvider) {
                var wsfedsp:ExternalWSFederationServiceProvider = obj as ExternalWSFederationServiceProvider;
                _linkLabel = wsfedsp.name;
                _linkIcon = EmbeddedIcons.externalWsFedSpIcon;
            } else if (obj is WikidAuthenticationService) {
                var wikid:WikidAuthenticationService = obj as WikidAuthenticationService;
                _linkLabel = wikid.name;
                _linkIcon = EmbeddedIcons.wikidAuthenticationServiceIcon;
            } else if (obj is DominoAuthenticationService) {
                var domino:DominoAuthenticationService = obj as DominoAuthenticationService;
                _linkLabel = domino.name;
                _linkIcon = EmbeddedIcons.dominoAuthenticationServiceIcon;
            } else if (obj is ClientCertAuthnService) {
                var clientCert:ClientCertAuthnService = obj as ClientCertAuthnService;
                _linkLabel = clientCert.name;
                _linkIcon = EmbeddedIcons.clientcertAuthenticationServiceIcon;
            } else if (obj is JBossEPPAuthenticationService) {
                var jbosseppas:JBossEPPAuthenticationService = obj as JBossEPPAuthenticationService;
                _linkLabel = jbosseppas.name;
                _linkIcon = EmbeddedIcons.jbosseppAuthenticationIcon;
            } else if (obj is DirectoryAuthenticationService) {
                var directoryService:DirectoryAuthenticationService = obj as DirectoryAuthenticationService;
                _linkLabel = directoryService.name;
                _linkIcon = EmbeddedIcons.directoryAuthenticationServiceIcon;
            } else if (obj is WindowsIntegratedAuthentication) {
                var winIntegratedAuthn:WindowsIntegratedAuthentication = obj as WindowsIntegratedAuthentication;
                _linkLabel = winIntegratedAuthn.name;
                _linkIcon = EmbeddedIcons.windowsAuthenticationServiceIcon;
            } else if (obj is Channel) {
                _linkLabel = (obj as Channel).name;
            } else if (obj is IdentitySource) {
                var identitySource:IdentitySource = obj as IdentitySource;
                _linkLabel = identitySource.name;
                if (obj is DbIdentitySource) {
                    _linkIcon = EmbeddedIcons.dbIdentitySourceIcon;
                } else if (obj is LdapIdentitySource) {
                    _linkIcon = EmbeddedIcons.ldapIdentitySourceIcon;
                } else if (obj is XmlIdentitySource) {
                    _linkIcon = EmbeddedIcons.xmlIdentitySourceIcon;
                } else {
                    _linkIcon = EmbeddedIcons.vaultIcon;
                }
            } else if (obj is ServiceResource) {
                _linkLabel = (obj as ServiceResource).name;
                if (obj is JBossEPPResource) {
                    _linkIcon = EmbeddedIcons.jbosseppResourceIcon;
                } else if (obj is SelfServicesResource) {
                    _linkIcon = EmbeddedIcons.selfServicesResourceIcon;
                } else if (obj is DominoResource) {
                    _linkIcon = EmbeddedIcons.dominoResourceIcon;
                } else if (obj is BlackBoardResource) {
                    _linkIcon = EmbeddedIcons.blackboardResourceIcon;
                } else if (obj is JOSSO2Resource) {
                    _linkIcon = EmbeddedIcons.josso2ResourceIcon;
                } else if (obj is MicroStrategyResource) {
                    _linkIcon = EmbeddedIcons.microStrategyResourceIcon;
                } else if (obj is SasResource) {
                    _linkIcon = EmbeddedIcons.sasResourceIcon;
                } else if (obj is SharepointResource) {
                    _linkIcon = EmbeddedIcons.sharepointResourceIcon;
                } else if (obj is ColdfusionResource) {
                    _linkIcon = EmbeddedIcons.coldfusionResourceIcon;
                } else if (obj is LiferayResource) {
                    _linkIcon = EmbeddedIcons.liferayResourceIcon;
                } else if (obj is JBossPortalResource) {
                    _linkIcon = EmbeddedIcons.jbossPortalResourceIcon;
                } else if (obj is AlfrescoResource) {
                    _linkIcon = EmbeddedIcons.alfrescoResourceIcon;
                } else if (obj is PhpBBResource) {
                    _linkIcon = EmbeddedIcons.phpbbResourceIcon;
                } else if (obj is JOSSO1Resource) { // This should be the last on the list since some of the others extend it
                    _linkIcon = EmbeddedIcons.josso1ResourceIcon;
                }
            } else if (obj is IdentityApplianceUnit) {
                var applianceUnit:IdentityApplianceUnit = obj as IdentityApplianceUnit;
                _linkLabel = applianceUnit.name;
                var type:IdentityApplianceUnitType = applianceUnit.type;
                if (type.equals(IdentityApplianceUnitType.FEDERATION_UNIT)) {
                    //_linkIcon = EmbeddedIcons.spIcon;
                } else if (type.equals(IdentityApplianceUnitType.PROVISIONING_UNIT)) {
                    _linkIcon = EmbeddedIcons.vaultIcon;
                }
            } else if (obj is ExecutionEnvironment && !(obj is CaptiveExecutionEnvironment)) { //check execution environment
                var execEnvirnoment:ExecutionEnvironment = obj as ExecutionEnvironment;
                _linkLabel = execEnvirnoment.name;
                if (obj is JbossExecutionEnvironment) {
                    _linkIcon = EmbeddedIcons.jbossEnvironmentIcon;
                } else if (obj is WeblogicExecutionEnvironment) {
                    _linkIcon = EmbeddedIcons.weblogicEnvironmentIcon;
                } else if (obj is TomcatExecutionEnvironment) {
                    _linkIcon = EmbeddedIcons.tomcatEnvironmentIcon;
                } else if (obj is WASCEExecutionEnvironment) {
                    _linkIcon = EmbeddedIcons.websphereEnvironmentIcon;
                } else if (obj is ApacheExecutionEnvironment) {
                    _linkIcon = EmbeddedIcons.apacheEnvironmentIcon;
                } else if (obj is WindowsIISExecutionEnvironment) {
                    _linkIcon = EmbeddedIcons.windowsEnvironmentIcon;
                } else if (obj is JEEExecutionEnvironment) {
                    _linkIcon = EmbeddedIcons.javaEnvironmentIcon;
                } else if (obj is PHPExecutionEnvironment) {
                    _linkIcon = EmbeddedIcons.phpEnvironmentIcon;
                } else if (obj is WebserverExecutionEnvironment) {
                    _linkIcon = EmbeddedIcons.webEnvironmentIcon;
                } else {
                    _linkIcon = EmbeddedIcons.executionEnvironmentIcon;
                }
                //TODO add other envirnoments
            }
        }

        private function nodeSelected(e:MouseEvent):void {
            dispatchEvent(new VNodeSelectedEvent(VNodeSelectedEvent.VNODE_SELECTED, IVisualNode(this.data).node.stringid, true, false, 0));
        }

        private function confirmNodeRemove(e:MouseEvent):void {

            Alert.show(resourceManager.getString(AtricoreConsole.BUNDLE, "modelling.noderenderer.deletequestion"),
                    resourceManager.getString(AtricoreConsole.BUNDLE, "modelling.noderenderer.confirm"), Alert.YES | Alert.NO, null, nodeRemoveConfirmed, null, Alert.YES);
        }

        private function nodeRemoveConfirmed(event:CloseEvent):void {
            if (event.detail == Alert.YES) {
                dispatchEvent(new VNodeRemoveEvent(VNodeRemoveEvent.VNODE_REMOVE, IVisualNode(this.data).node.stringid, true, false, 0));
            }
        }


        public function handleNodeRollOver(event:MouseEvent):void {
            (_vgraph as VisualGraph).data = IVisualNode(this.data);

            if (zoomAll.isPlaying) {
                zoomAll.reverse();
            }
            else {
                zoomAll.play([event.target], false);
            }

            // show node remove button
            removeNode.visible = true;
        }

        public function handleNodeRollOut(event:MouseEvent):void {
            (_vgraph as VisualGraph).data = null;

            // hide node remove button
            removeNode.visible = false;

            if (zoomAll.isPlaying) {
                zoomAll.reverse();
            }
            else {
                zoomAll.play([event.target], true);
            }

        }

        public function refreshData(e:VGraphEvent = null):void {
            loadData(IVisualNode(this.data).data);
        }

        /**
         * register the event listener
         * */
        private function registerListeners():void {
            IVisualNode(this.data).vgraph.addEventListener(VGraphEvent.VGRAPH_CHANGED, refreshData);
        }
        ]]>
	</mx:Script>
</mx:VBox>
