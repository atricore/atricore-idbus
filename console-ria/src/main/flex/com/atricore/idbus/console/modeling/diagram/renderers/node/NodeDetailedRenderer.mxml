<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Atricore Console
  ~
  ~ Copyright 2009-2010, Atricore Inc.
  ~
  ~ This is free software; you can redistribute it and/or modify it
  ~ under the terms of the GNU Lesser General Public License as
  ~ published by the Free Software Foundation; either version 2.1 of
  ~ the License, or (at your option) any later version.
  ~
  ~ This software is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  ~ Lesser General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public
  ~ License along with this software; if not, write to the Free
  ~ Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
  ~ 02110-1301 USA, or see the FSF site: http://www.fsf.org.
  -->

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:primitive="org.un.cava.birdeye.ravis.assets.icons.primitives.*"
	creationComplete="onCreationComplete()" autoLayout="true" rollOver="handleNodeRollOver(event)" rollOut="handleNodeRollOut(event)"
    verticalGap="0" horizontalAlign="center">

    <mx:Zoom id="zoomAll" zoomWidthTo="1.2" zoomHeightTo="1.2" zoomWidthFrom="1" zoomHeightFrom="1"/>

    <mx:Button label="{_linkLabel}" icon="{_linkIcon}" click="nodeSelected(event)" toggle="true"/>

    <mx:Button id="removeNode" icon="{EmbeddedIcons.removeNodeIcon}" click="confirmNodeRemove(event)" visible="false"/>

	<mx:Script>
		<![CDATA[

        import com.atricore.idbus.console.main.EmbeddedIcons;
        import com.atricore.idbus.console.modeling.diagram.event.VNodeRemoveEvent;
        import com.atricore.idbus.console.modeling.diagram.event.VNodeSelectedEvent;
        import com.atricore.idbus.console.modeling.diagram.model.GraphDataManager;
        import com.atricore.idbus.console.services.dto.ApacheExecutionEnvironment;
        import com.atricore.idbus.console.services.dto.BindingProvider;
        import com.atricore.idbus.console.services.dto.Channel;
        import com.atricore.idbus.console.services.dto.DbIdentitySource;
        import com.atricore.idbus.console.services.dto.ExecutionEnvironment;
        import com.atricore.idbus.console.services.dto.IdentityAppliance;
        import com.atricore.idbus.console.services.dto.IdentityApplianceUnit;
        import com.atricore.idbus.console.services.dto.IdentityApplianceUnitType;
        import com.atricore.idbus.console.services.dto.IdentityProvider;
        import com.atricore.idbus.console.services.dto.IdentitySource;
        import com.atricore.idbus.console.services.dto.JBossPortalExecutionEnvironment;
        import com.atricore.idbus.console.services.dto.JbossExecutionEnvironment;
        import com.atricore.idbus.console.services.dto.LdapIdentitySource;
        import com.atricore.idbus.console.services.dto.LiferayExecutionEnvironment;
        import com.atricore.idbus.console.services.dto.ServiceProvider;

        import com.atricore.idbus.console.services.dto.TomcatExecutionEnvironment;
        import com.atricore.idbus.console.services.dto.WASCEExecutionEnvironment;
        import com.atricore.idbus.console.services.dto.WeblogicExecutionEnvironment;

        import com.atricore.idbus.console.services.dto.WindowsIISExecutionEnvironment;
        import com.atricore.idbus.console.services.dto.XmlIdentitySource;

        import mx.controls.Alert;

        import mx.events.CloseEvent;

        import org.un.cava.birdeye.ravis.graphLayout.visual.IVisualGraph;
        import org.un.cava.birdeye.ravis.graphLayout.visual.IVisualNode;
        import org.un.cava.birdeye.ravis.graphLayout.visual.VisualGraph;
        import org.un.cava.birdeye.ravis.utils.events.VGraphEvent;

        private var _vgraph:IVisualGraph;

        [Bindable]
        public var _linkLabel:String;

        [Bindable]
        public var _linkIcon:Class;

        private var _graphManager:GraphDataManager;


        private function onCreationComplete():void {
            registerListeners();
            loadData(IVisualNode(this.data).data);
        }

        public override function set data(value:Object):void {
            super.data = value;
            _vgraph = (IVisualNode(this.data).vgraph);
        }

        protected function loadData(obj:Object):void {
            if (obj is IdentityAppliance) {
                var bus:IdentityAppliance = obj as IdentityAppliance;
                _linkLabel = bus.idApplianceDefinition.name;
                _linkIcon = EmbeddedIcons.busIcon;
            } else {
                if (obj is IdentityProvider) {
                    var idp:IdentityProvider = obj as IdentityProvider;
                    _linkLabel = idp.name;
                    _linkIcon = EmbeddedIcons.idpIcon;
                } else {
                    if (obj is ServiceProvider) {
                        var sp:ServiceProvider = obj as ServiceProvider;
                        _linkLabel = sp.name;
                        _linkIcon = EmbeddedIcons.spIcon;
                    } else {
                        if (obj is BindingProvider) {
                            var bp:BindingProvider = obj as BindingProvider;
                            _linkLabel = bp.name;
                            _linkIcon = EmbeddedIcons.bpIcon;
                        } else {
                            if (obj is Channel) {
                                _linkLabel = (obj as Channel).name;
                            } else {

                                if (obj is IdentitySource) {
                                    var identitySource:IdentitySource = obj as IdentitySource;
                                    _linkLabel = identitySource.name;
                                    if(obj is DbIdentitySource){
                                        _linkIcon = EmbeddedIcons.dbIdentitySourceIcon;
                                    } else if(obj is LdapIdentitySource){
                                        _linkIcon = EmbeddedIcons.ldapIdentitySourceIcon;
                                    } else if(obj is XmlIdentitySource){
                                        _linkIcon = EmbeddedIcons.xmlIdentitySourceIcon;
                                    } else {
                                        _linkIcon = EmbeddedIcons.vaultIcon;
                                    }
                                } else {
                                    if (obj is IdentityApplianceUnit) {
                                        var applianceUnit:IdentityApplianceUnit = obj as IdentityApplianceUnit;
                                        _linkLabel = applianceUnit.name;
                                        var type:IdentityApplianceUnitType = applianceUnit.type;
                                        if (type.equals(IdentityApplianceUnitType.FEDERATION_UNIT)) {
                                            _linkIcon = EmbeddedIcons.spIcon;
                                        } else if (type.equals(IdentityApplianceUnitType.PROVISIONING_UNIT)) {
                                            _linkIcon = EmbeddedIcons.vaultIcon;
                                        }
                                    } else {
                                        if(obj is ExecutionEnvironment){ //check execution environment
                                            var execEnvirnoment:ExecutionEnvironment = obj as ExecutionEnvironment;
                                            _linkLabel = execEnvirnoment.name;                                            
                                            if(obj is JbossExecutionEnvironment){
                                                _linkIcon = EmbeddedIcons.jbossEnvironmentIcon;
                                            } else if(obj is WeblogicExecutionEnvironment){
                                                _linkIcon = EmbeddedIcons.weblogicEnvironmentIcon;
                                            } else if (obj is TomcatExecutionEnvironment){
                                                _linkIcon = EmbeddedIcons.tomcatEnvironmentIcon;
                                            } else if (obj is JBossPortalExecutionEnvironment){
                                                _linkIcon = EmbeddedIcons.jbossEnvironmentIcon;
                                            } else if (obj is LiferayExecutionEnvironment){
                                                _linkIcon = EmbeddedIcons.liferayEnvironmentIcon;
                                            } else if (obj is WASCEExecutionEnvironment){
                                                _linkIcon = EmbeddedIcons.websphereEnvironmentIcon;
                                            } else if (obj is ApacheExecutionEnvironment){
                                                _linkIcon = EmbeddedIcons.apacheEnvironmentIcon;
                                            } else if (obj is WindowsIISExecutionEnvironment){
                                                _linkIcon = EmbeddedIcons.windowsEnvironmentIcon;
                                            } else {
                                                _linkIcon = EmbeddedIcons.executionEnvironmentIcon;
                                            }
                                            //TODO add other envirnoments
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        private function nodeSelected(e:MouseEvent):void {
            dispatchEvent(new VNodeSelectedEvent(VNodeSelectedEvent.VNODE_SELECTED, IVisualNode(this.data).node.stringid, true, false, 0));
        }

        private function confirmNodeRemove(e:MouseEvent):void {
            Alert.show("Are you sure you want to delete this item?", "Confirm Removal", Alert.YES | Alert.NO, null, nodeRemoveConfirmed, null, Alert.YES);
        }

        private function nodeRemoveConfirmed(event:CloseEvent):void {
            if (event.detail == Alert.YES) {
                dispatchEvent(new VNodeRemoveEvent(VNodeRemoveEvent.VNODE_REMOVE, IVisualNode(this.data).node.stringid, true, false, 0));
            }
        }


        public function handleNodeRollOver(event:MouseEvent):void {
            (_vgraph as VisualGraph).data = IVisualNode(this.data);

            if (zoomAll.isPlaying) {
                zoomAll.reverse();
            }
            else {
                zoomAll.play([event.target], false);
            }

            // show node remove button
            removeNode.visible = true;
        }

        public function handleNodeRollOut(event:MouseEvent):void {
            (_vgraph as VisualGraph).data = null;

            // hide node remove button
            removeNode.visible = false;

            if (zoomAll.isPlaying) {
                zoomAll.reverse();
            }
            else {
                zoomAll.play([event.target], true);
            }

        }

        public function refreshData(e:VGraphEvent = null):void {
            loadData(IVisualNode(this.data).data);
        }

        /**
         * register the event listener
         * */
        private function registerListeners():void {
            IVisualNode(this.data).vgraph.addEventListener(VGraphEvent.VGRAPH_CHANGED, refreshData);
        }

		]]>
	</mx:Script>
</mx:VBox>
